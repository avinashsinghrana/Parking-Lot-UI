<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/copilot.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/copilot.md" />
              <option name="originalContent" value="// Copilot Project Instructions&#10;//&#10;// 1. Use consistent routing: Each page/component should have its own route in App.js using React Router's &lt;Route&gt;.&#10;// 2. For loading indicators, use the animated logo-loading.svg as a spinner. Keep the animation clockwise and visually consistent.&#10;// 3. For error messages, use the .error-msg CSS class: red color, margin-top: 0, margin-bottom: 10px, font-size: 0.95em.&#10;// 4. For forms (login, forget password, etc.), use input-group and consistent button styles as in Login.css.&#10;// 5. For new pages, create a dedicated component in the appropriate folder (e.g., src/components/PageName/PageName.js).&#10;// 6. Import and use images/assets from the src/ directory, not public/.&#10;// 7. Use semantic HTML and accessible labels for all forms and buttons.&#10;// 8. Remove unused imports and code to keep files clean.&#10;// 9. Always validate and test new features for edge cases and UI consistency.&#10;// 10. Keep all new SVG or image assets in the src/ directory for easy import in React components.&#10;//&#10;// Update this file with any new project-wide conventions or requirements as they arise.&#10;" />
              <option name="updatedContent" value="// Copilot Project Instructions&#10;//&#10;// 1. Use consistent routing: Each page/component should have its own route in App.js using React Router's &lt;Route&gt;.&#10;// 2. For loading indicators, use the animated logo-loading.svg as a spinner. Keep the animation clockwise and visually consistent.&#10;// 3. For error messages, use the .error-msg CSS class: red color, margin-top: 0, margin-bottom: 10px, font-size: 0.95em.&#10;// 4. For forms (login, forget password, etc.), use input-group and consistent button styles as in Login.css.&#10;// 5. For new pages, create a dedicated component in the appropriate folder (e.g., src/components/PageName/PageName.js).&#10;// 6. Import and use images/assets from the src/ directory, not public/.&#10;// 7. Use semantic HTML and accessible labels for all forms and buttons.&#10;// 8. Remove unused imports and code to keep files clean.&#10;// 9. Always validate and test new features for edge cases and UI consistency.&#10;// 10. Keep all new SVG or image assets in the src/ directory for easy import in React components.&#10;//&#10;// Update this file with any new project-wide conventions or requirements as they arise.&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/dashboard/Dashboard.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/dashboard/Dashboard.css" />
              <option name="originalContent" value="/* Dashboard.css - Specific styles for the main employee dashboard */&#10;.dashboard-container {&#10;  max-width: none;&#10;  margin: 0;&#10;  position: absolute;&#10;  top: 64px;&#10;  bottom: 20px;&#10;  right: 20px;&#10;  left: 220px;&#10;  border-radius: 12px;&#10;  padding: 2rem 2.5rem 2.5rem 2.5rem;&#10;  overflow-x: hidden !important;&#10;  transition: left 0.3s ease;&#10;  box-sizing: border-box;&#10;  display: flex;&#10;  flex-direction: column;&#10;}&#10;&#10;.dashboard-container.expanded {&#10;  margin-left: 0px;&#10;}&#10;&#10;.dashboard-container.collapsed {&#10;  left: 76px;&#10;}&#10;&#10;/* Dashboard actions section - for positioning the Check In button */&#10;.dashboard-actions {&#10;  display: flex;&#10;  justify-content: space-between;&#10;  align-items: center;&#10;  width: 100%;&#10;  margin-bottom: 1rem;&#10;}&#10;&#10;/* Dashboard subtitle - adjusted to be inline with button */&#10;.dashboard-subtitle {&#10;  color: #a57b0a;&#10;  font-size: 1.5rem;&#10;  font-weight: bold;&#10;  margin: 0;&#10;  text-align: left;&#10;  display: inline-block;&#10;}&#10;&#10;/* Check In button styles */&#10;.check-in-btn {&#10;  background: #a57b0a; /* Green color */&#10;  color: #fff;&#10;  border: none;&#10;  border-radius: 5px;&#10;  font-weight: bold;&#10;  font-size: 0.98rem;&#10;  cursor: pointer;&#10;  transition: background 0.2s;&#10;  padding: 0.7rem 1.5rem;&#10;  margin-left: auto; /* Push to the right */&#10;}&#10;&#10;.check-in-btn:hover {&#10;  background: #c9a63a;&#10;}&#10;&#10;.check-in-btn:disabled {&#10;  background: #e0e0e0;&#10;  color: #888;&#10;  cursor: not-allowed;&#10;}&#10;&#10;/* Check In form styles */&#10;.check-in-form {&#10;  margin-bottom: 1rem;&#10;  padding: 1.2rem;&#10;  background: rgba(255, 255, 255, 0.2);&#10;  border-radius: 8px;&#10;}&#10;&#10;.form-field {&#10;  margin-bottom: 1.2rem;&#10;  display: flex;&#10;  flex-direction: column;&#10;}&#10;&#10;.form-label {&#10;  color: #a57b0a;&#10;  font-weight: bold;&#10;  margin-bottom: 0.4rem;&#10;  font-size: 0.95rem;&#10;}&#10;&#10;.form-value {&#10;  font-size: 1rem;&#10;  color: #333;&#10;  padding: 0.4rem 0;&#10;  font-weight: 500;&#10;}&#10;&#10;/* Form error message styling */&#10;.form-error {&#10;  color: #d32f2f;&#10;  font-size: 0.8rem;&#10;  margin-top: 0.3rem;&#10;  font-weight: 500;&#10;}&#10;&#10;/* Add a red border to fields with errors */&#10;.form-input.has-error,&#10;.form-select.has-error {&#10;  border-color: #d32f2f;&#10;}&#10;&#10;.form-input, .form-select {&#10;  padding: 0.75rem 0.8rem;&#10;  border-radius: 5px;&#10;  border: 2px solid #a57b0a;&#10;  background: #fffbe6;&#10;  color: #333;&#10;  font-size: 1rem;&#10;  outline: none;&#10;  transition: border-color 0.2s;&#10;  width: 100%;&#10;  height: 45px;&#10;  box-sizing: border-box;&#10;}&#10;&#10;.form-input:focus, .form-select:focus {&#10;  border-color: #d4b13a;&#10;  box-shadow: 0 0 0 2px rgba(212, 177, 58, 0.2);&#10;}&#10;&#10;.form-select {&#10;  cursor: pointer;&#10;  -webkit-appearance: none;&#10;  -moz-appearance: none;&#10;  appearance: none;&#10;  background-image: url(&quot;data:image/svg+xml;utf8,&lt;svg fill='%23a57b0a' height='24' viewBox='0 0 24 24' width='24' xmlns='http://www.w3.org/2000/svg'&gt;&lt;path d='M7 10l5 5 5-5z'/&gt;&lt;/svg&gt;&quot;);&#10;  background-repeat: no-repeat;&#10;  background-position: right 10px center;&#10;  padding-right: 30px;&#10;}&#10;&#10;.table-wrapper {&#10;  width: 100%;&#10;  overflow-x: hidden;&#10;  overflow-y: auto;&#10;  flex: 1;&#10;  margin-bottom: 0;&#10;  max-height: calc(100vh - 250px);&#10;}&#10;&#10;.dashboard-title {&#10;  color: #a57b0a;&#10;  font-size: 2rem;&#10;  font-weight: bold;&#10;  margin-bottom: 1.8rem;&#10;  margin-top: 0rem;&#10;  text-align: left;&#10;}&#10;&#10;.dashboard-subtitle {&#10;  color: #a57b0a;&#10;  font-size: 1.5rem;&#10;  font-weight: bold;&#10;  margin: 0;&#10;  text-align: left;&#10;  display: inline-block;&#10;}&#10;&#10;.employee-info {&#10;  font-size: 1rem;&#10;  margin-bottom: 1.2rem;&#10;}&#10;&#10;.dashboard-table {&#10;  width: 100%;&#10;  table-layout: auto;&#10;  margin: 0 auto;&#10;  border-collapse: separate;&#10;  border-spacing: 0;&#10;  background: #fff;&#10;  font-size: 1rem;&#10;  border-radius: 3px;&#10;  box-shadow: 0 4px 24px rgba(165, 123, 10, 0.13);&#10;  border: 2px solid #a57b0a;&#10;}&#10;&#10;.dashboard-table th, .dashboard-table td {&#10;  padding: 0.9rem 0.7rem;&#10;  border-bottom: 1px solid #eee;&#10;  text-align: left;&#10;  word-break: break-word;&#10;  white-space: normal;&#10;}&#10;&#10;.dashboard-table th {&#10;  background: linear-gradient(90deg, #f3e6c2 0%, #ffe9b3 100%);&#10;  color: #a57b0a;&#10;  font-weight: bold;&#10;  font-size: 1.08rem;&#10;  border-bottom: 2px solid #a57b0a;&#10;}&#10;&#10;.dashboard-table td {&#10;  background: #fff;&#10;  color: #222;&#10;  border-bottom: 1px solid #eee;&#10;  transition: background 0.2s;&#10;}&#10;&#10;.dashboard-table tr:nth-child(even) td {&#10;  background: #faf7e2;&#10;}&#10;&#10;.dashboard-table tr:hover td {&#10;  background: #fffbe6;&#10;}&#10;&#10;.dashboard-table th:last-child,&#10;.dashboard-table td:last-child {&#10;  text-align: center;&#10;}&#10;&#10;.dashboard-table tr:last-child td {&#10;  border-bottom: none;&#10;}&#10;&#10;.lock-btn {&#10;  background: #d32f2f;&#10;  color: #fff;&#10;  border: none;&#10;  border-radius: 5px;&#10;  font-weight: bold;&#10;  font-size: 0.98rem;&#10;  cursor: pointer;&#10;  transition: background 0.2s;&#10;  width: 100px;&#10;  min-width: 100px;&#10;  max-width: 100px;&#10;  padding: 0.4rem 0;&#10;  margin-right: 0.7rem;&#10;  display: inline-block;&#10;  text-align: center;&#10;}&#10;&#10;.lock-btn:hover {&#10;  background: #b71c1c;&#10;}&#10;&#10;.lock-btn:disabled {&#10;  background: #e0e0e0;&#10;  color: #888;&#10;  cursor: not-allowed;&#10;}&#10;&#10;.exit-btn {&#10;  background: #a57b0a;&#10;  color: #fff;&#10;  border: none;&#10;  border-radius: 5px;&#10;  font-weight: bold;&#10;  font-size: 0.98rem;&#10;  cursor: pointer;&#10;  transition: background 0.2s;&#10;  width: 100px;&#10;  min-width: 100px;&#10;  max-width: 100px;&#10;  padding: 0.4rem 0;&#10;  margin-right: 0.7rem;&#10;  display: inline-block;&#10;  text-align: center;&#10;}&#10;&#10;.exit-btn:hover {&#10;  background: #c9a63a;&#10;}&#10;&#10;.exit-btn:disabled {&#10;  background: #e0e0e0;&#10;  color: #888;&#10;  cursor: not-allowed;&#10;}&#10;&#10;.approve-btn {&#10;  background: #1976d2;&#10;  color: #fff;&#10;  border: none;&#10;  border-radius: 6px;&#10;  padding: 0.7rem 1.5rem;&#10;  font-size: 1.05rem;&#10;  font-weight: bold;&#10;  cursor: pointer;&#10;  transition: background 0.2s;&#10;}&#10;&#10;.approve-btn:hover {&#10;  background: #63a4ff;&#10;  color: #222;&#10;}&#10;&#10;/* Exit popup styles */&#10;.exit-popup-overlay {&#10;  position: fixed;&#10;  top: 0;&#10;  left: 0;&#10;  width: 100vw;&#10;  height: 100vh;&#10;  background: rgba(40, 30, 10, 0.45);&#10;  z-index: 998;&#10;}&#10;&#10;.exit-popup-card.logo-theme {&#10;  position: fixed;&#10;  left: 50%;&#10;  top: 50%;&#10;  transform: translate(-50%, -50%);&#10;  background: #fffbe6;&#10;  border-radius: 18px;&#10;  box-shadow: 0 8px 32px rgba(165, 123, 10, 0.18);&#10;  border: 2.5px solid #a57b0a;&#10;  min-width: 340px;&#10;  width: 400px;&#10;  max-width: 90vw;&#10;  padding: 2.2rem 2.2rem 2rem 2.2rem;&#10;  z-index: 999;&#10;  text-align: left;&#10;}&#10;&#10;.exit-popup-close {&#10;  position: absolute;&#10;  top: 18px;&#10;  right: 18px;&#10;  font-size: 1.6rem;&#10;  color: #a57b0a;&#10;  cursor: pointer;&#10;  font-weight: bold;&#10;  background: none;&#10;  border: none;&#10;  z-index: 1001;&#10;  transition: color 0.2s;&#10;}&#10;&#10;.exit-popup-close:hover {&#10;  color: #d4b13a;&#10;}&#10;&#10;.exit-popup-title {&#10;  font-size: 1.18rem;&#10;  font-weight: 700;&#10;  margin-bottom: 1.1rem;&#10;  text-align: center;&#10;  color: #a57b0a;&#10;}&#10;&#10;.exit-popup-detail {&#10;  font-size: 1.05rem;&#10;  margin-bottom: 0.7rem;&#10;  color: #222;&#10;}&#10;&#10;.exit-popup-details-table {&#10;  width: 100%;&#10;  border-collapse: separate;&#10;  border-spacing: 0;&#10;  margin-bottom: 1.2rem;&#10;}&#10;&#10;.exit-popup-details-table td {&#10;  padding: 0.6rem 0.7rem;&#10;  font-size: 1.05rem;&#10;  color: #222;&#10;  background: transparent;&#10;  border: none;&#10;}&#10;&#10;.exit-popup-detail-label {&#10;  color: #a57b0a;&#10;  font-weight: bold;&#10;  width: 50%;&#10;  background: transparent;&#10;}&#10;&#10;.exit-popup-detail-value {&#10;  color: #222;&#10;  width: 50%;&#10;  background: transparent;&#10;}&#10;&#10;.exit-popup-payment-method {&#10;  margin-bottom: 1.2rem;&#10;  display: flex;&#10;  margin-left: 12px;&#10;  align-items: center;&#10;  gap: 0.3rem;&#10;}&#10;&#10;.exit-popup-payment-dropdown {&#10;  padding: 0.5rem 1rem;&#10;  border-radius: 6px;&#10;  border: 2px solid #a57b0a;&#10;  background: #fffbe6;&#10;  color: #a57b0a;&#10;  font-size: 1.05rem;&#10;  font-weight: bold;&#10;  outline: none;&#10;  transition: border 0.2s;&#10;}&#10;&#10;.exit-popup-payment-dropdown:focus {&#10;  border-color: #d4b13a;&#10;}&#10;&#10;.exit-popup-qr-section {&#10;  display: flex;&#10;  flex-direction: column;&#10;  align-items: center;&#10;  justify-content: center;&#10;  text-align: center;&#10;  margin-bottom: 1.2rem;&#10;}&#10;&#10;.exit-popup-qr-code {&#10;  width: 128px;&#10;  height: 128px;&#10;  display: block;&#10;  border-radius: 12px;&#10;  box-shadow: 0 2px 8px rgba(165, 123, 10, 0.13);&#10;  background: #fffbe6;&#10;  padding: 8px;&#10;}&#10;&#10;.confirm-exit-btn {&#10;  display: block;&#10;  margin: 1.5rem auto 0 auto;&#10;  font-size: 1.05rem;&#10;  padding: 0.7rem 2rem;&#10;  min-width: 140px;&#10;  border-radius: 6px;&#10;  background: #a57b0a;&#10;  color: #fff;&#10;  border: none;&#10;  font-weight: bold;&#10;  cursor: pointer;&#10;  transition: background 0.2s;&#10;}&#10;&#10;.confirm-exit-btn:hover {&#10;  background: #c9a63a;&#10;  color: #222;&#10;}&#10;&#10;/* Form textarea for lock reason with min/max character requirements */&#10;.form-textarea {&#10;  padding: 0.75rem 0.8rem;&#10;  border-radius: 5px;&#10;  border: 2px solid #a57b0a;&#10;  background: #fffbe6;&#10;  color: #333;&#10;  font-size: 1rem;&#10;  outline: none;&#10;  transition: border-color 0.2s;&#10;  width: 100%;&#10;  min-height: 110px;&#10;  resize: vertical;&#10;  box-sizing: border-box;&#10;  font-family: inherit;&#10;}&#10;&#10;.form-textarea:focus {&#10;  border-color: #d4b13a;&#10;  box-shadow: 0 0 0 2px rgba(212, 177, 58, 0.2);&#10;}&#10;&#10;/* Character counter styling */&#10;.char-counter {&#10;  display: flex;&#10;  justify-content: flex-end;&#10;  font-size: 0.85rem;&#10;  margin-top: 0.3rem;&#10;  color: #666;&#10;}&#10;&#10;.counter-error {&#10;  color: #d32f2f;&#10;  font-weight: 500;&#10;}&#10;&#10;/* Lock popup content styling */&#10;.lock-popup-content {&#10;  margin-bottom: 1rem;&#10;}&#10;&#10;.lock-popup-content p {&#10;  margin-bottom: 1rem;&#10;  color: #555;&#10;  font-size: 1rem;&#10;}&#10;&#10;/* Locked vehicle styling */&#10;.locked-vehicle-row {&#10;  background-color: rgba(253, 237, 237, 0.5) !important;&#10;}&#10;&#10;.locked-vehicle-row td {&#10;  background-color: rgba(253, 237, 237, 0.5) !important;&#10;}&#10;&#10;.locked-vehicle-row:hover td {&#10;  background-color: rgba(253, 237, 237, 0.8) !important;&#10;}&#10;&#10;/* Details button styling */&#10;.details-btn {&#10;  background: #1976d2;&#10;  color: #fff;&#10;  border: none;&#10;  border-radius: 5px;&#10;  font-weight: bold;&#10;  font-size: 0.98rem;&#10;  cursor: pointer;&#10;  transition: background 0.2s;&#10;  width: 100px;&#10;  min-width: 100px;&#10;  max-width: 100px;&#10;  padding: 0.4rem 0;&#10;  display: inline-block;&#10;  text-align: center;&#10;}&#10;&#10;.details-btn:hover {&#10;  background: #63a4ff;&#10;}&#10;&#10;/* Unlock button styling */&#10;.unlock-btn {&#10;  display: block;&#10;  margin: 1.5rem auto 0 auto;&#10;  font-size: 1.05rem;&#10;  padding: 0.7rem 2rem;&#10;  min-width: 140px;&#10;  border-radius: 6px;&#10;  background: #4CAF50; /* Green color */&#10;  color: #fff;&#10;  border: none;&#10;  font-weight: bold;&#10;  cursor: pointer;&#10;  transition: background 0.2s;&#10;}&#10;&#10;.unlock-btn:hover {&#10;  background: #45a049;&#10;  color: #fff;&#10;}&#10;&#10;/* Lock reason display styling */&#10;.lock-reason-display {&#10;  margin-top: 1rem;&#10;  padding: 1rem;&#10;  background: rgba(255, 255, 255, 0.2);&#10;  border-radius: 8px;&#10;}&#10;&#10;.lock-reason-title {&#10;  color: #a57b0a;&#10;  font-weight: bold;&#10;  margin: 0 0 0.5rem 0;&#10;  font-size: 1rem;&#10;}&#10;&#10;.lock-reason-text {&#10;  margin: 0;&#10;  padding: 0;&#10;  color: #333;&#10;  font-size: 0.95rem;&#10;  line-height: 1.5;&#10;  white-space: pre-wrap;&#10;}&#10;&#10;/* Unlock popup content styling */&#10;.unlock-popup-content {&#10;  margin-bottom: 1rem;&#10;}&#10;&#10;.unlock-popup-content p {&#10;  margin-bottom: 1rem;&#10;  color: #555;&#10;  font-size: 1rem;&#10;}&#10;" />
              <option name="updatedContent" value="/* Dashboard.css - Specific styles for the main employee dashboard */&#10;.dashboard-container {&#10;  max-width: none;&#10;  margin: 0;&#10;  position: absolute;&#10;  top: 64px;&#10;  bottom: 20px;&#10;  right: 20px;&#10;  left: 220px;&#10;  border-radius: 12px;&#10;  padding: 2rem 2.5rem 2.5rem 2.5rem;&#10;  overflow-x: hidden !important;&#10;  transition: left 0.3s ease;&#10;  box-sizing: border-box;&#10;  display: flex;&#10;  flex-direction: column;&#10;}&#10;&#10;.dashboard-container.expanded {&#10;  margin-left: 0px;&#10;}&#10;&#10;.dashboard-container.collapsed {&#10;  left: 76px;&#10;}&#10;&#10;/* Dashboard actions section - for positioning the Check In button */&#10;.dashboard-actions {&#10;  display: flex;&#10;  justify-content: space-between;&#10;  align-items: center;&#10;  width: 100%;&#10;  margin-bottom: 1rem;&#10;}&#10;&#10;/* Dashboard subtitle - adjusted to be inline with button */&#10;.dashboard-subtitle {&#10;  color: #a57b0a;&#10;  font-size: 1.5rem;&#10;  font-weight: bold;&#10;  margin: 0;&#10;  text-align: left;&#10;  display: inline-block;&#10;}&#10;&#10;/* Check In button styles */&#10;.check-in-btn {&#10;  background: #a57b0a; /* Gold color */&#10;  color: #fff;&#10;  border: none;&#10;  border-radius: 5px;&#10;  font-weight: bold;&#10;  font-size: 0.98rem;&#10;  cursor: pointer;&#10;  transition: background 0.2s;&#10;  padding: 0.7rem 1.5rem;&#10;  margin-left: auto; /* Push to the right */&#10;}&#10;&#10;.check-in-btn:hover {&#10;  background: #c9a63a;&#10;}&#10;&#10;.check-in-btn:disabled {&#10;  background: #e0e0e0;&#10;  color: #888;&#10;  cursor: not-allowed;&#10;}&#10;&#10;/* Subscription button styles - matching the check-in button */&#10;.subscription-btn {&#10;  background: #a57b0a;&#10;  color: #fff;&#10;  border: none;&#10;  border-radius: 5px;&#10;  font-weight: bold;&#10;  font-size: 0.98rem;&#10;  cursor: pointer;&#10;  transition: background 0.2s;&#10;  padding: 0.7rem 1.5rem;&#10;}&#10;&#10;.subscription-btn:hover {&#10;  background: #c9a63a;&#10;}&#10;&#10;.subscription-btn:disabled {&#10;  background: #e0e0e0;&#10;  color: #888;&#10;  cursor: not-allowed;&#10;}&#10;&#10;/* Check In form styles */&#10;.check-in-form {&#10;  margin-bottom: 1rem;&#10;  padding: 1.2rem;&#10;  background: rgba(255, 255, 255, 0.2);&#10;  border-radius: 8px;&#10;}&#10;&#10;.form-field {&#10;  margin-bottom: 1.2rem;&#10;  display: flex;&#10;  flex-direction: column;&#10;}&#10;&#10;.form-label {&#10;  color: #a57b0a;&#10;  font-weight: bold;&#10;  margin-bottom: 0.4rem;&#10;  font-size: 0.95rem;&#10;}&#10;&#10;.form-value {&#10;  font-size: 1rem;&#10;  color: #333;&#10;  padding: 0.4rem 0;&#10;  font-weight: 500;&#10;}&#10;&#10;/* Form error message styling */&#10;.form-error {&#10;  color: #d32f2f;&#10;  font-size: 0.8rem;&#10;  margin-top: 0.3rem;&#10;  font-weight: 500;&#10;}&#10;&#10;/* Add a red border to fields with errors */&#10;.form-input.has-error,&#10;.form-select.has-error {&#10;  border-color: #d32f2f;&#10;}&#10;&#10;.form-input, .form-select {&#10;  padding: 0.75rem 0.8rem;&#10;  border-radius: 5px;&#10;  border: 2px solid #a57b0a;&#10;  background: #fffbe6;&#10;  color: #333;&#10;  font-size: 1rem;&#10;  outline: none;&#10;  transition: border-color 0.2s;&#10;  width: 100%;&#10;  height: 45px;&#10;  box-sizing: border-box;&#10;}&#10;&#10;.form-input:focus, .form-select:focus {&#10;  border-color: #d4b13a;&#10;  box-shadow: 0 0 0 2px rgba(212, 177, 58, 0.2);&#10;}&#10;&#10;.form-select {&#10;  cursor: pointer;&#10;  -webkit-appearance: none;&#10;  -moz-appearance: none;&#10;  appearance: none;&#10;  background-image: url(&quot;data:image/svg+xml;utf8,&lt;svg fill='%23a57b0a' height='24' viewBox='0 0 24 24' width='24' xmlns='http://www.w3.org/2000/svg'&gt;&lt;path d='M7 10l5 5 5-5z'/&gt;&lt;/svg&gt;&quot;);&#10;  background-repeat: no-repeat;&#10;  background-position: right 10px center;&#10;  padding-right: 30px;&#10;}&#10;&#10;.table-wrapper {&#10;  width: 100%;&#10;  overflow-x: hidden;&#10;  overflow-y: auto;&#10;  flex: 1;&#10;  margin-bottom: 0;&#10;  max-height: calc(100vh - 250px);&#10;}&#10;&#10;.dashboard-title {&#10;  color: #a57b0a;&#10;  font-size: 2rem;&#10;  font-weight: bold;&#10;  margin-bottom: 1.8rem;&#10;  margin-top: 0rem;&#10;  text-align: left;&#10;}&#10;&#10;.dashboard-subtitle {&#10;  color: #a57b0a;&#10;  font-size: 1.5rem;&#10;  font-weight: bold;&#10;  margin: 0;&#10;  text-align: left;&#10;  display: inline-block;&#10;}&#10;&#10;.employee-info {&#10;  font-size: 1rem;&#10;  margin-bottom: 1.2rem;&#10;}&#10;&#10;.dashboard-table {&#10;  width: 100%;&#10;  table-layout: auto;&#10;  margin: 0 auto;&#10;  border-collapse: separate;&#10;  border-spacing: 0;&#10;  background: #fff;&#10;  font-size: 1rem;&#10;  border-radius: 3px;&#10;  box-shadow: 0 4px 24px rgba(165, 123, 10, 0.13);&#10;  border: 2px solid #a57b0a;&#10;}&#10;&#10;.dashboard-table th, .dashboard-table td {&#10;  padding: 0.9rem 0.7rem;&#10;  border-bottom: 1px solid #eee;&#10;  text-align: left;&#10;  word-break: break-word;&#10;  white-space: normal;&#10;}&#10;&#10;.dashboard-table th {&#10;  background: linear-gradient(90deg, #f3e6c2 0%, #ffe9b3 100%);&#10;  color: #a57b0a;&#10;  font-weight: bold;&#10;  font-size: 1.08rem;&#10;  border-bottom: 2px solid #a57b0a;&#10;}&#10;&#10;.dashboard-table td {&#10;  background: #fff;&#10;  color: #222;&#10;  border-bottom: 1px solid #eee;&#10;  transition: background 0.2s;&#10;}&#10;&#10;.dashboard-table tr:nth-child(even) td {&#10;  background: #faf7e2;&#10;}&#10;&#10;.dashboard-table tr:hover td {&#10;  background: #fffbe6;&#10;}&#10;&#10;.dashboard-table th:last-child,&#10;.dashboard-table td:last-child {&#10;  text-align: center;&#10;}&#10;&#10;.dashboard-table tr:last-child td {&#10;  border-bottom: none;&#10;}&#10;&#10;.lock-btn {&#10;  background: #d32f2f;&#10;  color: #fff;&#10;  border: none;&#10;  border-radius: 5px;&#10;  font-weight: bold;&#10;  font-size: 0.98rem;&#10;  cursor: pointer;&#10;  transition: background 0.2s;&#10;  width: 100px;&#10;  min-width: 100px;&#10;  max-width: 100px;&#10;  padding: 0.4rem 0;&#10;  margin-right: 0.7rem;&#10;  display: inline-block;&#10;  text-align: center;&#10;}&#10;&#10;.lock-btn:hover {&#10;  background: #b71c1c;&#10;}&#10;&#10;.lock-btn:disabled {&#10;  background: #e0e0e0;&#10;  color: #888;&#10;  cursor: not-allowed;&#10;}&#10;&#10;.exit-btn {&#10;  background: #a57b0a;&#10;  color: #fff;&#10;  border: none;&#10;  border-radius: 5px;&#10;  font-weight: bold;&#10;  font-size: 0.98rem;&#10;  cursor: pointer;&#10;  transition: background 0.2s;&#10;  width: 100px;&#10;  min-width: 100px;&#10;  max-width: 100px;&#10;  padding: 0.4rem 0;&#10;  margin-right: 0.7rem;&#10;  display: inline-block;&#10;  text-align: center;&#10;}&#10;&#10;.exit-btn:hover {&#10;  background: #c9a63a;&#10;}&#10;&#10;.exit-btn:disabled {&#10;  background: #e0e0e0;&#10;  color: #888;&#10;  cursor: not-allowed;&#10;}&#10;&#10;.approve-btn {&#10;  background: #1976d2;&#10;  color: #fff;&#10;  border: none;&#10;  border-radius: 6px;&#10;  padding: 0.7rem 1.5rem;&#10;  font-size: 1.05rem;&#10;  font-weight: bold;&#10;  cursor: pointer;&#10;  transition: background 0.2s;&#10;}&#10;&#10;.approve-btn:hover {&#10;  background: #63a4ff;&#10;  color: #222;&#10;}&#10;&#10;/* Exit popup styles */&#10;.exit-popup-overlay {&#10;  position: fixed;&#10;  top: 0;&#10;  left: 0;&#10;  width: 100vw;&#10;  height: 100vh;&#10;  background: rgba(40, 30, 10, 0.45);&#10;  z-index: 998;&#10;}&#10;&#10;.exit-popup-card.logo-theme {&#10;  position: fixed;&#10;  left: 50%;&#10;  top: 50%;&#10;  transform: translate(-50%, -50%);&#10;  background: #fffbe6;&#10;  border-radius: 18px;&#10;  box-shadow: 0 8px 32px rgba(165, 123, 10, 0.18);&#10;  border: 2.5px solid #a57b0a;&#10;  min-width: 340px;&#10;  width: 400px;&#10;  max-width: 90vw;&#10;  padding: 2.2rem 2.2rem 2rem 2.2rem;&#10;  z-index: 999;&#10;  text-align: left;&#10;}&#10;&#10;.exit-popup-close {&#10;  position: absolute;&#10;  top: 18px;&#10;  right: 18px;&#10;  font-size: 1.6rem;&#10;  color: #a57b0a;&#10;  cursor: pointer;&#10;  font-weight: bold;&#10;  background: none;&#10;  border: none;&#10;  z-index: 1001;&#10;  transition: color 0.2s;&#10;}&#10;&#10;.exit-popup-close:hover {&#10;  color: #d4b13a;&#10;}&#10;&#10;.exit-popup-title {&#10;  font-size: 1.18rem;&#10;  font-weight: 700;&#10;  margin-bottom: 1.1rem;&#10;  text-align: center;&#10;  color: #a57b0a;&#10;}&#10;&#10;.exit-popup-detail {&#10;  font-size: 1.05rem;&#10;  margin-bottom: 0.7rem;&#10;  color: #222;&#10;}&#10;&#10;.exit-popup-details-table {&#10;  width: 100%;&#10;  border-collapse: separate;&#10;  border-spacing: 0;&#10;  margin-bottom: 1.2rem;&#10;}&#10;&#10;.exit-popup-details-table td {&#10;  padding: 0.6rem 0.7rem;&#10;  font-size: 1.05rem;&#10;  color: #222;&#10;  background: transparent;&#10;  border: none;&#10;}&#10;&#10;.exit-popup-detail-label {&#10;  color: #a57b0a;&#10;  font-weight: bold;&#10;  width: 50%;&#10;  background: transparent;&#10;}&#10;&#10;.exit-popup-detail-value {&#10;  color: #222;&#10;  width: 50%;&#10;  background: transparent;&#10;}&#10;&#10;.exit-popup-payment-method {&#10;  margin-bottom: 1.2rem;&#10;  display: flex;&#10;  margin-left: 12px;&#10;  align-items: center;&#10;  gap: 0.3rem;&#10;}&#10;&#10;.exit-popup-payment-dropdown {&#10;  padding: 0.5rem 1rem;&#10;  border-radius: 6px;&#10;  border: 2px solid #a57b0a;&#10;  background: #fffbe6;&#10;  color: #a57b0a;&#10;  font-size: 1.05rem;&#10;  font-weight: bold;&#10;  outline: none;&#10;  transition: border 0.2s;&#10;}&#10;&#10;.exit-popup-payment-dropdown:focus {&#10;  border-color: #d4b13a;&#10;}&#10;&#10;.exit-popup-qr-section {&#10;  display: flex;&#10;  flex-direction: column;&#10;  align-items: center;&#10;  justify-content: center;&#10;  text-align: center;&#10;  margin-bottom: 1.2rem;&#10;}&#10;&#10;.exit-popup-qr-code {&#10;  width: 128px;&#10;  height: 128px;&#10;  display: block;&#10;  border-radius: 12px;&#10;  box-shadow: 0 2px 8px rgba(165, 123, 10, 0.13);&#10;  background: #fffbe6;&#10;  padding: 8px;&#10;}&#10;&#10;.confirm-exit-btn {&#10;  display: block;&#10;  margin: 1.5rem auto 0 auto;&#10;  font-size: 1.05rem;&#10;  padding: 0.7rem 2rem;&#10;  min-width: 140px;&#10;  border-radius: 6px;&#10;  background: #a57b0a;&#10;  color: #fff;&#10;  border: none;&#10;  font-weight: bold;&#10;  cursor: pointer;&#10;  transition: background 0.2s;&#10;}&#10;&#10;.confirm-exit-btn:hover {&#10;  background: #c9a63a;&#10;  color: #222;&#10;}&#10;&#10;/* Form textarea for lock reason with min/max character requirements */&#10;.form-textarea {&#10;  padding: 0.75rem 0.8rem;&#10;  border-radius: 5px;&#10;  border: 2px solid #a57b0a;&#10;  background: #fffbe6;&#10;  color: #333;&#10;  font-size: 1rem;&#10;  outline: none;&#10;  transition: border-color 0.2s;&#10;  width: 100%;&#10;  min-height: 110px;&#10;  resize: vertical;&#10;  box-sizing: border-box;&#10;  font-family: inherit;&#10;}&#10;&#10;.form-textarea:focus {&#10;  border-color: #d4b13a;&#10;  box-shadow: 0 0 0 2px rgba(212, 177, 58, 0.2);&#10;}&#10;&#10;/* Character counter styling */&#10;.char-counter {&#10;  display: flex;&#10;  justify-content: flex-end;&#10;  font-size: 0.85rem;&#10;  margin-top: 0.3rem;&#10;  color: #666;&#10;}&#10;&#10;.counter-error {&#10;  color: #d32f2f;&#10;  font-weight: 500;&#10;}&#10;&#10;/* Lock popup content styling */&#10;.lock-popup-content {&#10;  margin-bottom: 1rem;&#10;}&#10;&#10;.lock-popup-content p {&#10;  margin-bottom: 1rem;&#10;  color: #555;&#10;  font-size: 1rem;&#10;}&#10;&#10;/* Locked vehicle styling */&#10;.locked-vehicle-row {&#10;  background-color: rgba(253, 237, 237, 0.5) !important;&#10;}&#10;&#10;.locked-vehicle-row td {&#10;  background-color: rgba(253, 237, 237, 0.5) !important;&#10;}&#10;&#10;.locked-vehicle-row:hover td {&#10;  background-color: rgba(253, 237, 237, 0.8) !important;&#10;}&#10;&#10;/* Details button styling */&#10;.details-btn {&#10;  background: #1976d2;&#10;  color: #fff;&#10;  border: none;&#10;  border-radius: 5px;&#10;  font-weight: bold;&#10;  font-size: 0.98rem;&#10;  cursor: pointer;&#10;  transition: background 0.2s;&#10;  width: 100px;&#10;  min-width: 100px;&#10;  max-width: 100px;&#10;  padding: 0.4rem 0;&#10;  display: inline-block;&#10;  text-align: center;&#10;}&#10;&#10;.details-btn:hover {&#10;  background: #63a4ff;&#10;}&#10;&#10;/* Unlock button styling */&#10;.unlock-btn {&#10;  display: block;&#10;  margin: 1.5rem auto 0 auto;&#10;  font-size: 1.05rem;&#10;  padding: 0.7rem 2rem;&#10;  min-width: 140px;&#10;  border-radius: 6px;&#10;  background: #4CAF50; /* Green color */&#10;  color: #fff;&#10;  border: none;&#10;  font-weight: bold;&#10;  cursor: pointer;&#10;  transition: background 0.2s;&#10;}&#10;&#10;.unlock-btn:hover {&#10;  background: #45a049;&#10;  color: #fff;&#10;}&#10;&#10;/* Lock reason display styling */&#10;.lock-reason-display {&#10;  margin-top: 1rem;&#10;  padding: 1rem;&#10;  background: rgba(255, 255, 255, 0.2);&#10;  border-radius: 8px;&#10;}&#10;&#10;.lock-reason-title {&#10;  color: #a57b0a;&#10;  font-weight: bold;&#10;  margin: 0 0 0.5rem 0;&#10;  font-size: 1rem;&#10;}&#10;&#10;.lock-reason-text {&#10;  margin: 0;&#10;  padding: 0;&#10;  color: #333;&#10;  font-size: 0.95rem;&#10;  line-height: 1.5;&#10;  white-space: pre-wrap;&#10;}&#10;&#10;/* Unlock popup content styling */&#10;.unlock-popup-content {&#10;  margin-bottom: 1rem;&#10;}&#10;&#10;.unlock-popup-content p {&#10;  margin-bottom: 1rem;&#10;  color: #555;&#10;  font-size: 1rem;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/dashboard/EmployeeDashboard.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/dashboard/EmployeeDashboard.js" />
              <option name="originalContent" value="import React, { useState } from 'react';&#10;import { CredentialStore } from '../Login/Login';&#10;import Header from '../Header';&#10;import Sidebar from './Sidebar';&#10;import './EmployeeDashboard.css';&#10;import './Dashboard.css'; // Import Dashboard-specific CSS&#10;import '../dashboard/parking-history/ParkingHistory.css'; // Import ParkingHistory CSS for consistent styling&#10;import { QRCodeSVG } from 'qrcode.react';&#10;import { Routes, Route } from 'react-router-dom';&#10;import ParkingHistory from './parking-history/ParkingHistory';&#10;import ParkingStatus from './parking-status/ParkingStatus';&#10;import FareDetails from './fare-details/FareDetails';&#10;import ParkingBooking from './parking-booking/ParkingBooking';&#10;import Subscription from './subscription/Subscription';&#10;import LostComplaint from './lost-complaint/LostComplaint';&#10;&#10;// Mock vehicle details&#10;const VEHICLE_DETAILS = [&#10;&#9;{&#10;&#9;&#9;vehicleNumber: 'MH12AB1234',&#10;&#9;&#9;vehicleType: 'Car',&#10;&#9;&#9;entryTime: '2025-09-24 09:15',&#10;&#9;&#9;allotedBy: 'John Doe',&#10;&#9;&#9;exitBy: '',&#10;&#9;&#9;fare: 120,&#10;&#9;&#9;exitTime: '',&#10;&#9;&#9;locked: false,&#10;&#9;},&#10;&#9;{&#10;&#9;&#9;vehicleNumber: 'MH14XY5678',&#10;&#9;&#9;vehicleType: 'Bike',&#10;&#9;&#9;entryTime: '2025-09-24 10:05',&#10;&#9;&#9;allotedBy: 'Jane Smith',&#10;&#9;&#9;exitBy: '',&#10;&#9;&#9;fare: 60,&#10;&#9;&#9;exitTime: '',&#10;&#9;&#9;locked: false,&#10;&#9;},&#10;&#9;// Add more vehicles as needed&#10;];&#10;&#10;const EmployeeDashboard = () =&gt; {&#10;&#9;const employeeName = CredentialStore.name;&#10;&#9;const employeeId = CredentialStore.employeeId;&#10;    const parkingLotName = CredentialStore.parkingLot || 'GNIOT PARKING';&#10;&#9;const [vehicles, setVehicles] = useState(VEHICLE_DETAILS);&#10;&#9;const [showExitPopup, setShowExitPopup] = useState(false);&#10;&#9;const [selectedVehicle, setSelectedVehicle] = useState(null);&#10;&#9;const [sidebarCollapsed, setSidebarCollapsed] = useState(false);&#10;&#9;const [paymentMethod, setPaymentMethod] = useState('CASH');&#10;    const [showCheckInPopup, setShowCheckInPopup] = useState(false);&#10;&#10;    // New state for lock functionality&#10;    const [showLockPopup, setShowLockPopup] = useState(false);&#10;    const [lockReason, setLockReason] = useState('');&#10;    const [lockReasonError, setLockReasonError] = useState('');&#10;    const [charCount, setCharCount] = useState(0); // Character counter for lock reason&#10;&#10;    // New state for subscription popup&#10;    const [showSubscriptionPopup, setShowSubscriptionPopup] = useState(false);&#10;    const [subscriptionData, setSubscriptionData] = useState({&#10;        vehicleNumber: '',&#10;        vehicleType: 'Car',&#10;        subscriptionType: 'PREMIUM',&#10;        subscriptionFrequency: 'Monthly'&#10;    });&#10;    const [subscriptionErrors, setSubscriptionErrors] = useState({});&#10;&#10;    // Function to get subscription benefits based on type&#10;    const getSubscriptionBenefits = (type) =&gt; {&#10;        switch(type) {&#10;            case 'PREMIUM':&#10;                return [&#10;                    &quot;Priority parking spots&quot;,&#10;                    &quot;24/7 customer support&quot;,&#10;                    &quot;20% discount on monthly rates&quot;,&#10;                    &quot;Free car wash once a month&quot;&#10;                ];&#10;            case 'ELITE':&#10;                return [&#10;                    &quot;Reserved premium parking spots&quot;,&#10;                    &quot;24/7 priority customer support&quot;,&#10;                    &quot;35% discount on monthly rates&quot;,&#10;                    &quot;Weekly car wash service&quot;,&#10;                    &quot;Valet parking service&quot;&#10;                ];&#10;            case 'SUPER':&#10;                return [&#10;                    &quot;VIP reserved parking spots&quot;,&#10;                    &quot;Dedicated customer relationship manager&quot;,&#10;                    &quot;50% discount on monthly rates&quot;,&#10;                    &quot;Bi-weekly car wash and detailing&quot;,&#10;                    &quot;Valet parking service&quot;&#10;                ];&#10;            default:&#10;                return [&quot;No benefits available&quot;];&#10;        }&#10;    };&#10;&#10;    // Function to calculate subscription charge based on type and frequency&#10;    const calculateSubscriptionCharge = (type, frequency, vehicleType) =&gt; {&#10;        // Base monthly rates&#10;        let baseRate = 0;&#10;&#10;        // Set base rate according to vehicle type&#10;        switch(vehicleType) {&#10;            case 'Bike':&#10;                baseRate = 500; // Base rate for bike&#10;                break;&#10;            case 'Car':&#10;                baseRate = 1000; // Base rate for car&#10;                break;&#10;            case 'SUV':&#10;                baseRate = 1500; // Base rate for SUV&#10;                break;&#10;            case 'Truck':&#10;                baseRate = 2000; // Base rate for truck&#10;                break;&#10;            default:&#10;                baseRate = 1000;&#10;        }&#10;&#10;        // Multiply by subscription type factor&#10;        let typeFactor = 1;&#10;        switch(type) {&#10;            case 'PREMIUM':&#10;                typeFactor = 1.2; // 20% premium&#10;                break;&#10;            case 'ELITE':&#10;                typeFactor = 1.5; // 50% premium&#10;                break;&#10;            case 'SUPER':&#10;                typeFactor = 2; // 100% premium&#10;                break;&#10;            default:&#10;                typeFactor = 1;&#10;        }&#10;&#10;        // Calculate based on frequency with discount for longer subscriptions&#10;        let frequencyFactor = 1;&#10;        let months = 1;&#10;&#10;        switch(frequency) {&#10;            case 'Monthly':&#10;                months = 1;&#10;                frequencyFactor = 1; // No discount for monthly&#10;                break;&#10;            case 'Quarterly':&#10;                months = 3;&#10;                frequencyFactor = 0.9; // 10% discount for quarterly&#10;                break;&#10;            case 'Half-yearly':&#10;                months = 6;&#10;                frequencyFactor = 0.85; // 15% discount for half-yearly&#10;                break;&#10;            case 'Yearly':&#10;                months = 12;&#10;                frequencyFactor = 0.8; // 20% discount for yearly&#10;                break;&#10;            default:&#10;                months = 1;&#10;                frequencyFactor = 1;&#10;        }&#10;&#10;        // Calculate total charge&#10;        const monthlyCharge = baseRate * typeFactor * frequencyFactor;&#10;        const totalCharge = monthlyCharge * months;&#10;&#10;        return {&#10;            monthly: Math.round(monthlyCharge),&#10;            total: Math.round(totalCharge)&#10;        };&#10;    };&#10;&#10;    // New state for details popup&#10;    const [showDetailsPopup, setShowDetailsPopup] = useState(false);&#10;    const [showUnlockPopup, setShowUnlockPopup] = useState(false);&#10;    const [unlockPaymentMethod, setUnlockPaymentMethod] = useState('CASH');&#10;    const [unlockFee, setUnlockFee] = useState(200); // Default unlock fee&#10;&#10;    // New state for check-in form&#10;    const [checkInData, setCheckInData] = useState({&#10;        vehicleNumber: '',&#10;        vehicleType: 'Car',&#10;        parkingType: 'Hourly'&#10;    });&#10;&#10;    // Add form validation state&#10;    const [formErrors, setFormErrors] = useState({});&#10;&#10;    // Handle form field changes&#10;    const handleCheckInFormChange = (e) =&gt; {&#10;        const { name, value } = e.target;&#10;&#10;        // Convert vehicle number to uppercase&#10;        const processedValue = name === 'vehicleNumber' ? value.toUpperCase() : value;&#10;&#10;        setCheckInData(prevData =&gt; ({&#10;            ...prevData,&#10;            [name]: processedValue&#10;        }));&#10;&#10;        // Clear error for this field when user types&#10;        if (formErrors[name]) {&#10;            setFormErrors(prev =&gt; ({&#10;                ...prev,&#10;                [name]: ''&#10;            }));&#10;        }&#10;    };&#10;&#10;    // Validate form fields&#10;    const validateForm = () =&gt; {&#10;        const errors = {};&#10;&#10;        // Check vehicle number&#10;        if (!checkInData.vehicleNumber.trim()) {&#10;            errors.vehicleNumber = &quot;Vehicle number is required&quot;;&#10;        }&#10;&#10;        // Check vehicle type&#10;        if (!checkInData.vehicleType) {&#10;            errors.vehicleType = &quot;Please select a vehicle type&quot;;&#10;        }&#10;&#10;        // Check parking type&#10;        if (!checkInData.parkingType) {&#10;            errors.parkingType = &quot;Please select a parking type&quot;;&#10;        }&#10;&#10;        setFormErrors(errors);&#10;        return Object.keys(errors).length === 0;&#10;    };&#10;&#10;    // Handle check-in form submission&#10;    const handleCheckInSubmit = () =&gt; {&#10;        // Validate form&#10;        const isValid = validateForm();&#10;&#10;        if (!isValid) {&#10;            return; // Don't proceed if validation fails&#10;        }&#10;&#10;        // Here you would typically send the data to your backend&#10;        // For now, let's add it to the vehicles list&#10;        const newVehicle = {&#10;            vehicleNumber: checkInData.vehicleNumber,&#10;            vehicleType: checkInData.vehicleType,&#10;            entryTime: new Date().toLocaleString(),&#10;            allotedBy: employeeName,&#10;            exitBy: '',&#10;            fare: 0, // This would be calculated based on parking type&#10;            exitTime: '',&#10;            locked: false,&#10;            parkingType: checkInData.parkingType&#10;        };&#10;&#10;        // Add the new vehicle to the list&#10;        setVehicles([newVehicle, ...vehicles]);&#10;&#10;        // Reset form data&#10;        setCheckInData({&#10;            vehicleNumber: '',&#10;            vehicleType: 'Car',&#10;            parkingType: 'Hourly'&#10;        });&#10;&#10;        // Clear any errors&#10;        setFormErrors({});&#10;&#10;        // Close the popup&#10;        setShowCheckInPopup(false);&#10;    };&#10;&#10;&#9;const handleExitClick = (vehicle) =&gt; {&#10;&#9;&#9;// Set exit time to now for demo&#10;&#9;&#9;setSelectedVehicle({ ...vehicle, exitTime: new Date().toLocaleString() });&#10;&#9;&#9;setShowExitPopup(true);&#10;&#9;};&#10;&#10;&#9;const handleConfirmExit = () =&gt; {&#10;&#9;&#9;// Update vehicle exitBy and exitTime&#10;&#9;&#9;setVehicles(&#10;&#9;&#9;&#9;vehicles.map((v) =&gt;&#10;&#9;&#9;&#9;&#9;v.vehicleNumber === selectedVehicle.vehicleNumber&#10;&#9;&#9;&#9;&#9;&#9;? { ...v, exitBy: employeeName, exitTime: selectedVehicle.exitTime }&#10;&#9;&#9;&#9;&#9;&#9;: v&#10;&#9;&#9;&#9;)&#10;&#9;&#9;);&#10;&#9;&#9;setShowExitPopup(false);&#10;&#9;&#9;setSelectedVehicle(null);&#10;&#9;};&#10;&#10;&#9;function getGreeting() {&#10;&#9;&#9;const hour = new Date().getHours();&#10;&#9;&#9;if (hour &lt; 12) return 'Good Morning';&#10;&#9;&#9;if (hour &lt; 17) return 'Good Afternoon';&#10;&#9;&#9;return 'Good Evening';&#10;&#9;}&#10;    // Handle Check In button click&#10;    const handleCheckInClick = () =&gt; {&#10;        setShowCheckInPopup(true);&#10;    };&#10;&#10;    // Handle Lock button click&#10;    const handleLockClick = (vehicle) =&gt; {&#10;        setSelectedVehicle(vehicle);&#10;        setLockReason('');&#10;        setLockReasonError('');&#10;        setCharCount(0);&#10;        setShowLockPopup(true);&#10;    };&#10;&#10;    // Handle Lock reason input change&#10;    const handleLockReasonChange = (e) =&gt; {&#10;        const value = e.target.value;&#10;        // Only update if within the 150 character limit&#10;        if (value.length &lt;= 150) {&#10;            setLockReason(value);&#10;            setCharCount(value.length);&#10;            // Clear error when user types&#10;            if (lockReasonError) {&#10;                setLockReasonError('');&#10;            }&#10;        }&#10;    };&#10;&#10;    // Handle Lock confirmation&#10;    const handleLockConfirm = () =&gt; {&#10;        // Validate lock reason (minimum 30 characters)&#10;        if (!lockReason.trim()) {&#10;            setLockReasonError('Please provide a reason for locking the vehicle');&#10;            return;&#10;        } else if (lockReason.trim().length &lt; 30) {&#10;            setLockReasonError(`Reason must be at least 30 characters (currently ${lockReason.trim().length})`);&#10;            return;&#10;        }&#10;&#10;        // Update vehicle locked status&#10;        setVehicles(&#10;            vehicles.map((v) =&gt;&#10;                v.vehicleNumber === selectedVehicle.vehicleNumber&#10;                    ? { ...v, locked: true, lockReason: lockReason, lockedBy: employeeName, lockTime: new Date().toLocaleString() }&#10;                    : v&#10;            )&#10;        );&#10;&#10;        // Close popup and reset fields&#10;        setShowLockPopup(false);&#10;        setLockReason('');&#10;        setCharCount(0);&#10;        setSelectedVehicle(null);&#10;    };&#10;&#10;    // Handle Details button click (for locked vehicles)&#10;    const handleDetailsClick = (vehicle) =&gt; {&#10;        setSelectedVehicle(vehicle);&#10;        setShowDetailsPopup(true);&#10;    };&#10;&#10;    // Handle Unlock button click&#10;    const handleUnlockClick = () =&gt; {&#10;        setUnlockPaymentMethod('CASH');&#10;        setShowDetailsPopup(false);&#10;        setShowUnlockPopup(true);&#10;    };&#10;&#10;    // Handle Unlock confirmation&#10;    const handleUnlockConfirm = () =&gt; {&#10;        // Update vehicle locked status&#10;        setVehicles(&#10;            vehicles.map((v) =&gt;&#10;                v.vehicleNumber === selectedVehicle.vehicleNumber&#10;                    ? {&#10;                        ...v,&#10;                        locked: false,&#10;                        unlockTime: new Date().toLocaleString(),&#10;                        unlockBy: employeeName,&#10;                        unlockPaymentMethod: unlockPaymentMethod,&#10;                        unlockFee: unlockFee&#10;                      }&#10;                    : v&#10;            )&#10;        );&#10;&#10;        // Close popup and reset&#10;        setShowUnlockPopup(false);&#10;        setSelectedVehicle(null);&#10;    };&#10;&#10;    // Handle Subscription button click&#10;    const handleSubscriptionClick = () =&gt; {&#10;        setSelectedVehicle(null);&#10;        setSubscriptionData({&#10;            vehicleNumber: '',&#10;            vehicleType: 'Car',&#10;            subscriptionType: 'PREMIUM',&#10;            subscriptionFrequency: 'Monthly'&#10;        });&#10;        setShowSubscriptionPopup(true);&#10;    };&#10;&#10;    // Handle Subscription form field change&#10;    const handleSubscriptionFormChange = (e) =&gt; {&#10;        const { name, value } = e.target;&#10;&#10;        setSubscriptionData(prevData =&gt; ({&#10;            ...prevData,&#10;            [name]: value&#10;        }));&#10;    };&#10;&#10;    // Validate Subscription form&#10;    const validateSubscriptionForm = () =&gt; {&#10;        const errors = {};&#10;&#10;        // Check vehicle number&#10;        if (!subscriptionData.vehicleNumber.trim()) {&#10;            errors.vehicleNumber = &quot;Vehicle number is required&quot;;&#10;        }&#10;&#10;        // Check vehicle type&#10;        if (!subscriptionData.vehicleType) {&#10;            errors.vehicleType = &quot;Please select a vehicle type&quot;;&#10;        }&#10;&#10;        // Check subscription type&#10;        if (!subscriptionData.subscriptionType) {&#10;            errors.subscriptionType = &quot;Please select a subscription type&quot;;&#10;        }&#10;&#10;        // Check subscription frequency&#10;        if (!subscriptionData.subscriptionFrequency) {&#10;            errors.subscriptionFrequency = &quot;Please select a subscription frequency&quot;;&#10;        }&#10;&#10;        setSubscriptionErrors(errors);&#10;        return Object.keys(errors).length === 0;&#10;    };&#10;&#10;    // Handle Subscription form submission&#10;    const handleSubscriptionSubmit = () =&gt; {&#10;        // Validate form&#10;        const isValid = validateSubscriptionForm();&#10;&#10;        if (!isValid) {&#10;            return; // Don't proceed if validation fails&#10;        }&#10;&#10;        // Here you would typically send the subscription data to your backend&#10;        // For now, let's just log it&#10;        console.log(&quot;Subscription Data:&quot;, subscriptionData);&#10;&#10;        // Close the popup&#10;        setShowSubscriptionPopup(false);&#10;    };&#10;&#10;&#9;return (&#10;&#9;&#9;&lt;Routes&gt;&#10;&#9;&#9;&#9;&lt;Route path=&quot;/*&quot; element={&#10;&#9;&#9;&#9;&#9;&lt;div&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;Header&#10;&#9;&#9;&#9;&#9;&#9;&#9;user={{ name: employeeName, employeeId: employeeId }}&#10;&#9;&#9;&#9;&#9;&#9;&#9;showAdmin={false}&#10;&#9;&#9;&#9;&#9;&#9;&#9;showRegister={false}&#10;&#9;&#9;&#9;&#9;&#9;&#9;onHamburgerClick={() =&gt; setSidebarCollapsed((collapsed) =&gt; !collapsed)}&#10;&#9;&#9;&#9;&#9;&#9;/&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;Sidebar collapsed={sidebarCollapsed} /&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;Routes&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;Route path=&quot;parking-history&quot; element={&lt;ParkingHistory sidebarCollapsed={sidebarCollapsed} /&gt;} /&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;Route path=&quot;fare-details&quot; element={&lt;FareDetails sidebarCollapsed={sidebarCollapsed} /&gt;} /&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;Route path=&quot;parking-booking&quot; element={&lt;ParkingBooking sidebarCollapsed={sidebarCollapsed} /&gt;} /&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;Route path=&quot;subscription&quot; element={&lt;Subscription sidebarCollapsed={sidebarCollapsed} /&gt;} /&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;Route path=&quot;lost-complaint&quot; element={&lt;LostComplaint sidebarCollapsed={sidebarCollapsed} /&gt;} /&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;Route path=&quot;parking-status&quot; element={&lt;ParkingStatus sidebarCollapsed={sidebarCollapsed} /&gt;} /&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;Route path=&quot;/&quot; element={&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;div className={`parking-history-container ${sidebarCollapsed ? 'collapsed' : 'expanded'}`}&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;h2 className=&quot;dashboard-title&quot;&gt;{getGreeting()}, {employeeName || 'Employee'}!&lt;/h2&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;div className=&quot;employee-info&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;span&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;b&gt;Employee ID:&lt;/b&gt; {employeeId || '-'}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/span&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/div&gt;&#10;&#10;                                &lt;div className=&quot;dashboard-actions&quot;&gt;&#10;                                    &lt;h3 className=&quot;dashboard-subtitle&quot;&gt;Vehicle Details&lt;/h3&gt;&#10;                                    &lt;div&gt;&#10;                                        &lt;button className=&quot;check-in-btn&quot; onClick={handleCheckInClick}&gt;&#10;                                            Check In&#10;                                        &lt;/button&gt;&#10;                                        &lt;button className=&quot;subscription-btn&quot; onClick={handleSubscriptionClick} style={{ marginLeft: '10px' }}&gt;&#10;                                            Activate Subscription&#10;                                        &lt;/button&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;div className=&quot;table-wrapper&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;table className=&quot;parking-history-table&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;thead&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;tr&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;th&gt;Vehicle Number&lt;/th&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;th&gt;Vehicle Type&lt;/th&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;th&gt;Entry Time&lt;/th&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;th&gt;Alloted By&lt;/th&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;th&gt;Exit By&lt;/th&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;th&gt;Action&lt;/th&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/tr&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/thead&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;tbody&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;{vehicles.map((vehicle) =&gt; (&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;tr key={vehicle.vehicleNumber} className={vehicle.locked ? 'locked-vehicle-row' : ''}&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;td&gt;{vehicle.vehicleNumber}&lt;/td&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;td&gt;{vehicle.vehicleType}&lt;/td&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;td&gt;{vehicle.entryTime}&lt;/td&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;td&gt;{vehicle.allotedBy}&lt;/td&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;td&gt;{vehicle.exitBy || '-'}&lt;/td&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;td style={{ textAlign: 'center' }}&gt;&#10;                                                        {vehicle.locked ? (&#10;                                                            // Show Details button if vehicle is locked&#10;                                                            &lt;button&#10;                                                                className=&quot;details-btn&quot;&#10;                                                                onClick={() =&gt; handleDetailsClick(vehicle)}&#10;                                                            &gt;&#10;                                                                Details&#10;                                                            &lt;/button&gt;&#10;                                                        ) : (&#10;                                                            // Show Lock and Exit buttons if vehicle is not locked&#10;                                                            &lt;&gt;&#10;                                                                &lt;button&#10;                                                                    className=&quot;lock-btn&quot;&#10;                                                                    style={{ marginRight: '0.5rem' }}&#10;                                                                    disabled={!!vehicle.exitBy}&#10;                                                                    onClick={() =&gt; handleLockClick(vehicle)}&#10;                                                                &gt;&#10;                                                                    Lock&#10;                                                                &lt;/button&gt;&#10;                                                                &lt;button&#10;                                                                    className=&quot;exit-btn&quot;&#10;                                                                    disabled={!!vehicle.exitBy}&#10;                                                                    onClick={() =&gt; handleExitClick(vehicle)}&#10;                                                                &gt;&#10;                                                                    Exit&#10;                                                                &lt;/button&gt;&#10;                                                            &lt;/&gt;&#10;                                                        )}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/td&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/tr&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;))}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/tbody&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/table&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/div&gt;&#10;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;{/* Exit Popup */}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;{showExitPopup &amp;&amp; selectedVehicle &amp;&amp; (&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;div className=&quot;exit-popup-overlay&quot; onClick={() =&gt; setShowExitPopup(false)}&gt;&lt;/div&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;div className=&quot;exit-popup-card logo-theme&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;span className=&quot;exit-popup-close&quot; onClick={() =&gt; setShowExitPopup(false)} title=&quot;Close&quot;&gt;&amp;#10005;&lt;/span&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;div className=&quot;exit-popup-title&quot;&gt;Parking Charge Details&lt;/div&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;table className=&quot;exit-popup-details-table&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;tbody&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;tr&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;td className=&quot;exit-popup-detail-label&quot;&gt;&lt;b&gt;Vehicle Number:&lt;/b&gt;&lt;/td&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;td className=&quot;exit-popup-detail-value&quot;&gt;{selectedVehicle.vehicleNumber}&lt;/td&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/tr&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;tr&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;td className=&quot;exit-popup-detail-label&quot;&gt;&lt;b&gt;Entry Time:&lt;/b&gt;&lt;/td&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;td className=&quot;exit-popup-detail-value&quot;&gt;{selectedVehicle.entryTime}&lt;/td&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/tr&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;tr&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;td className=&quot;exit-popup-detail-label&quot;&gt;&lt;b&gt;Exit Time:&lt;/b&gt;&lt;/td&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;td className=&quot;exit-popup-detail-value&quot;&gt;{selectedVehicle.exitTime}&lt;/td&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/tr&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;tr&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;td className=&quot;exit-popup-detail-label&quot;&gt;&lt;b&gt;Fare:&lt;/b&gt;&lt;/td&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;td className=&quot;exit-popup-detail-value&quot;&gt;₹{selectedVehicle.fare}&lt;/td&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/tr&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/tbody&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/table&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;div className=&quot;exit-popup-payment-method&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;label htmlFor=&quot;payment-method&quot; className=&quot;exit-popup-detail-label&quot;&gt;Payment Method:&lt;/label&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;select&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;id=&quot;payment-method&quot;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;className=&quot;exit-popup-payment-dropdown&quot;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;value={paymentMethod}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;onChange={e =&gt; setPaymentMethod(e.target.value)}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;option value=&quot;CASH&quot;&gt;CASH&lt;/option&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;option value=&quot;Card&quot;&gt;Card&lt;/option&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;option value=&quot;UPI&quot;&gt;UPI&lt;/option&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/select&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;{paymentMethod === 'UPI' &amp;&amp; (&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;div className=&quot;exit-popup-qr-section&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;div className=&quot;exit-popup-detail-label&quot; style={{marginBottom: '0.5rem'}}&gt;Scan to pay via UPI:&lt;/div&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;QRCodeSVG&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;value=&quot;upi://pay?pa=test@upi&amp;pn=TestUser&amp;am=100&quot;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;size={128}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;bgColor=&quot;#fffbe6&quot;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;fgColor=&quot;#a57b0a&quot;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;className=&quot;exit-popup-qr-code&quot;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;/&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;)}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;button&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;className=&quot;confirm-exit-btn&quot;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;onClick={handleConfirmExit}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;Confirm&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/button&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;)}&#10;&#10;                                {/* Check In Popup */}&#10;                                {showCheckInPopup &amp;&amp; (&#10;                                    &lt;&gt;&#10;                                        &lt;div className=&quot;exit-popup-overlay&quot; onClick={() =&gt; setShowCheckInPopup(false)}&gt;&lt;/div&gt;&#10;                                        &lt;div className=&quot;exit-popup-card logo-theme&quot;&gt;&#10;                                            &lt;span className=&quot;exit-popup-close&quot; onClick={() =&gt; setShowCheckInPopup(false)} title=&quot;Close&quot;&gt;&amp;#10005;&lt;/span&gt;&#10;                                            &lt;div className=&quot;exit-popup-title&quot;&gt;Check In Vehicle&lt;/div&gt;&#10;                                            &lt;div className=&quot;check-in-form&quot;&gt;&#10;                                                &lt;div className=&quot;form-field&quot;&gt;&#10;                                                    &lt;label htmlFor=&quot;vehicle-number&quot; className=&quot;form-label&quot;&gt;Vehicle Number:&lt;/label&gt;&#10;                                                    &lt;input&#10;                                                        type=&quot;text&quot;&#10;                                                        id=&quot;vehicle-number&quot;&#10;                                                        name=&quot;vehicleNumber&quot;&#10;                                                        className=&quot;form-input&quot;&#10;                                                        value={checkInData.vehicleNumber}&#10;                                                        onChange={handleCheckInFormChange}&#10;                                                    /&gt;&#10;                                                    {formErrors.vehicleNumber &amp;&amp; (&#10;                                                        &lt;div className=&quot;form-error&quot;&gt;{formErrors.vehicleNumber}&lt;/div&gt;&#10;                                                    )}&#10;                                                &lt;/div&gt;&#10;                                                &lt;div className=&quot;form-field&quot;&gt;&#10;                                                    &lt;label htmlFor=&quot;vehicle-type&quot; className=&quot;form-label&quot;&gt;Vehicle Type:&lt;/label&gt;&#10;                                                    &lt;select&#10;                                                        id=&quot;vehicle-type&quot;&#10;                                                        name=&quot;vehicleType&quot;&#10;                                                        className=&quot;form-select&quot;&#10;                                                        value={checkInData.vehicleType}&#10;                                                        onChange={handleCheckInFormChange}&#10;                                                    &gt;&#10;                                                        &lt;option value=&quot;Car&quot;&gt;Car&lt;/option&gt;&#10;                                                        &lt;option value=&quot;Bike&quot;&gt;Bike&lt;/option&gt;&#10;                                                        &lt;option value=&quot;Truck&quot;&gt;Truck&lt;/option&gt;&#10;                                                        {/* Add more vehicle types as needed */}&#10;                                                    &lt;/select&gt;&#10;                                                    {formErrors.vehicleType &amp;&amp; (&#10;                                                        &lt;div className=&quot;form-error&quot;&gt;{formErrors.vehicleType}&lt;/div&gt;&#10;                                                    )}&#10;                                                &lt;/div&gt;&#10;                                                &lt;div className=&quot;form-field&quot;&gt;&#10;                                                    &lt;label htmlFor=&quot;parking-type&quot; className=&quot;form-label&quot;&gt;Parking Type:&lt;/label&gt;&#10;                                                    &lt;select&#10;                                                        id=&quot;parking-type&quot;&#10;                                                        name=&quot;parkingType&quot;&#10;                                                        className=&quot;form-select&quot;&#10;                                                        value={checkInData.parkingType}&#10;                                                        onChange={handleCheckInFormChange}&#10;                                                    &gt;&#10;                                                        &lt;option value=&quot;Hourly&quot;&gt;Hourly&lt;/option&gt;&#10;                                                        &lt;option value=&quot;Daily&quot;&gt;Daily&lt;/option&gt;&#10;                                                        &lt;option value=&quot;Monthly&quot;&gt;Monthly&lt;/option&gt;&#10;                                                    &lt;/select&gt;&#10;                                                    {formErrors.parkingType &amp;&amp; (&#10;                                                        &lt;div className=&quot;form-error&quot;&gt;{formErrors.parkingType}&lt;/div&gt;&#10;                                                    )}&#10;                                                &lt;/div&gt;&#10;                                                &lt;div className=&quot;form-field&quot;&gt;&#10;                                                    &lt;label className=&quot;form-label&quot;&gt;&lt;b&gt;Parking Lot:&lt;/b&gt;&lt;/label&gt;&#10;                                                    &lt;span className=&quot;form-value&quot;&gt;{parkingLotName}&lt;/span&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;button&#10;                                                className=&quot;confirm-exit-btn&quot;&#10;                                                onClick={handleCheckInSubmit}&#10;                                            &gt;&#10;                                                Submit&#10;                                            &lt;/button&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/&gt;&#10;                                )}&#10;&#10;                                {/* Lock Vehicle Popup */}&#10;                                {showLockPopup &amp;&amp; selectedVehicle &amp;&amp; (&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;div className=&quot;exit-popup-overlay&quot; onClick={() =&gt; setShowLockPopup(false)}&gt;&lt;/div&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;div className=&quot;exit-popup-card logo-theme&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;span className=&quot;exit-popup-close&quot; onClick={() =&gt; setShowLockPopup(false)} title=&quot;Close&quot;&gt;&amp;#10005;&lt;/span&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;div className=&quot;exit-popup-title&quot;&gt;Lock Vehicle&lt;/div&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;div className=&quot;lock-popup-content&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;p&gt;Are you sure you want to lock this vehicle?&lt;/p&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;div className=&quot;form-field&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;label htmlFor=&quot;lock-reason&quot; className=&quot;form-label&quot;&gt;Reason for locking:&lt;/label&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;textarea&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;id=&quot;lock-reason&quot;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;className=&quot;form-textarea&quot;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;value={lockReason}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;onChange={handleLockReasonChange}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;rows=&quot;4&quot;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;placeholder=&quot;Please provide a detailed reason for locking this vehicle (minimum 50 characters required)&quot;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&gt;&lt;/textarea&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;div className=&quot;char-counter&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;span className={charCount &lt; 30 ? 'counter-error' : ''}&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;{charCount}/150 characters&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;{charCount &lt; 30 ? ` (${30 - charCount} more needed)` : ''}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/span&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;{lockReasonError &amp;&amp; (&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;div className=&quot;form-error&quot;&gt;{lockReasonError}&lt;/div&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;)}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;button&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;className=&quot;confirm-exit-btn&quot;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;onClick={handleLockConfirm}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;Confirm Lock&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/button&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;)}&#10;&#10;                                {/* Vehicle Details Popup (for locked vehicles) */}&#10;                                {showDetailsPopup &amp;&amp; selectedVehicle &amp;&amp; (&#10;                                    &lt;&gt;&#10;                                        &lt;div className=&quot;exit-popup-overlay&quot; onClick={() =&gt; setShowDetailsPopup(false)}&gt;&lt;/div&gt;&#10;                                        &lt;div className=&quot;exit-popup-card logo-theme&quot;&gt;&#10;                                            &lt;span className=&quot;exit-popup-close&quot; onClick={() =&gt; setShowDetailsPopup(false)} title=&quot;Close&quot;&gt;&amp;#10005;&lt;/span&gt;&#10;                                            &lt;div className=&quot;exit-popup-title&quot;&gt;Vehicle Lock Details&lt;/div&gt;&#10;                                            &lt;table className=&quot;exit-popup-details-table&quot;&gt;&#10;                                                &lt;tbody&gt;&#10;                                                    &lt;tr&gt;&#10;                                                        &lt;td className=&quot;exit-popup-detail-label&quot;&gt;&lt;b&gt;Vehicle Number:&lt;/b&gt;&lt;/td&gt;&#10;                                                        &lt;td className=&quot;exit-popup-detail-value&quot;&gt;{selectedVehicle.vehicleNumber}&lt;/td&gt;&#10;                                                    &lt;/tr&gt;&#10;                                                    &lt;tr&gt;&#10;                                                        &lt;td className=&quot;exit-popup-detail-label&quot;&gt;&lt;b&gt;Entry Time:&lt;/b&gt;&lt;/td&gt;&#10;                                                        &lt;td className=&quot;exit-popup-detail-value&quot;&gt;{selectedVehicle.entryTime}&lt;/td&gt;&#10;                                                    &lt;/tr&gt;&#10;                                                    &lt;tr&gt;&#10;                                                        &lt;td className=&quot;exit-popup-detail-label&quot;&gt;&lt;b&gt;Locked By:&lt;/b&gt;&lt;/td&gt;&#10;                                                        &lt;td className=&quot;exit-popup-detail-value&quot;&gt;{selectedVehicle.lockedBy}&lt;/td&gt;&#10;                                                    &lt;/tr&gt;&#10;                                                    &lt;tr&gt;&#10;                                                        &lt;td className=&quot;exit-popup-detail-label&quot;&gt;&lt;b&gt;Lock Time:&lt;/b&gt;&lt;/td&gt;&#10;                                                        &lt;td className=&quot;exit-popup-detail-value&quot;&gt;{selectedVehicle.lockTime}&lt;/td&gt;&#10;                                                    &lt;/tr&gt;&#10;                                                &lt;/tbody&gt;&#10;                                            &lt;/table&gt;&#10;                                            &lt;div className=&quot;lock-reason-display&quot;&gt;&#10;                                                &lt;h4 className=&quot;lock-reason-title&quot;&gt;Reason for locking:&lt;/h4&gt;&#10;                                                &lt;p className=&quot;lock-reason-text&quot;&gt;{selectedVehicle.lockReason}&lt;/p&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;button&#10;                                                className=&quot;unlock-btn&quot;&#10;                                                onClick={handleUnlockClick}&#10;                                            &gt;&#10;                                                Unlock Vehicle&#10;                                            &lt;/button&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/&gt;&#10;                                )}&#10;&#10;                                {/* Unlock Vehicle Popup with Payment */}&#10;                                {showUnlockPopup &amp;&amp; selectedVehicle &amp;&amp; (&#10;                                    &lt;&gt;&#10;                                        &lt;div className=&quot;exit-popup-overlay&quot; onClick={() =&gt; setShowUnlockPopup(false)}&gt;&lt;/div&gt;&#10;                                        &lt;div className=&quot;exit-popup-card logo-theme&quot;&gt;&#10;                                            &lt;span className=&quot;exit-popup-close&quot; onClick={() =&gt; setShowUnlockPopup(false)} title=&quot;Close&quot;&gt;&amp;#10005;&lt;/span&gt;&#10;                                            &lt;div className=&quot;exit-popup-title&quot;&gt;Unlock Vehicle&lt;/div&gt;&#10;                                            &lt;div className=&quot;unlock-popup-content&quot;&gt;&#10;                                                &lt;p&gt;To unlock this vehicle, a penalty fee of ₹{unlockFee} must be paid.&lt;/p&gt;&#10;                                                &lt;table className=&quot;exit-popup-details-table&quot;&gt;&#10;                                                    &lt;tbody&gt;&#10;                                                        &lt;tr&gt;&#10;                                                            &lt;td className=&quot;exit-popup-detail-label&quot;&gt;&lt;b&gt;Vehicle Number:&lt;/b&gt;&lt;/td&gt;&#10;                                                            &lt;td className=&quot;exit-popup-detail-value&quot;&gt;{selectedVehicle.vehicleNumber}&lt;/td&gt;&#10;                                                        &lt;/tr&gt;&#10;                                                        &lt;tr&gt;&#10;                                                            &lt;td className=&quot;exit-popup-detail-label&quot;&gt;&lt;b&gt;Penalty Fee:&lt;/b&gt;&lt;/td&gt;&#10;                                                            &lt;td className=&quot;exit-popup-detail-value&quot;&gt;₹{unlockFee}&lt;/td&gt;&#10;                                                        &lt;/tr&gt;&#10;                                                    &lt;/tbody&gt;&#10;                                                &lt;/table&gt;&#10;                                                &lt;div className=&quot;exit-popup-payment-method&quot;&gt;&#10;                                                    &lt;label htmlFor=&quot;unlock-payment-method&quot; className=&quot;exit-popup-detail-label&quot;&gt;Payment Method:&lt;/label&gt;&#10;                                                    &lt;select&#10;                                                        id=&quot;unlock-payment-method&quot;&#10;                                                        className=&quot;exit-popup-payment-dropdown&quot;&#10;                                                        value={unlockPaymentMethod}&#10;                                                        onChange={e =&gt; setUnlockPaymentMethod(e.target.value)}&#10;                                                    &gt;&#10;                                                        &lt;option value=&quot;CASH&quot;&gt;CASH&lt;/option&gt;&#10;                                                        &lt;option value=&quot;Card&quot;&gt;Card&lt;/option&gt;&#10;                                                        &lt;option value=&quot;UPI&quot;&gt;UPI&lt;/option&gt;&#10;                                                    &lt;/select&gt;&#10;                                                &lt;/div&gt;&#10;                                                {unlockPaymentMethod === 'UPI' &amp;&amp; (&#10;                                                    &lt;div className=&quot;exit-popup-qr-section&quot;&gt;&#10;                                                        &lt;div className=&quot;exit-popup-detail-label&quot; style={{marginBottom: '0.5rem'}}&gt;Scan to pay via UPI:&lt;/div&gt;&#10;                                                        &lt;QRCodeSVG&#10;                                                            value={`upi://pay?pa=test@upi&amp;pn=UnlockFee&amp;am=${unlockFee}`}&#10;                                                            size={128}&#10;                                                            bgColor=&quot;#fffbe6&quot;&#10;                                                            fgColor=&quot;#a57b0a&quot;&#10;                                                            className=&quot;exit-popup-qr-code&quot;&#10;                                                        /&gt;&#10;                                                    &lt;/div&gt;&#10;                                                )}&#10;                                            &lt;/div&gt;&#10;                                            &lt;button&#10;                                                className=&quot;confirm-exit-btn&quot;&#10;                                                onClick={handleUnlockConfirm}&#10;                                            &gt;&#10;                                                Confirm Payment &amp; Unlock&#10;                                            &lt;/button&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/&gt;&#10;                                )}&#10;&#10;                                {/* Subscription Popup */}&#10;                                {showSubscriptionPopup &amp;&amp; (&#10;                                    &lt;&gt;&#10;                                        &lt;div className=&quot;exit-popup-overlay&quot; onClick={() =&gt; setShowSubscriptionPopup(false)}&gt;&lt;/div&gt;&#10;                                        &lt;div className=&quot;exit-popup-card logo-theme&quot; style={{ maxWidth: '500px' }}&gt;&#10;                                            &lt;span className=&quot;exit-popup-close&quot; onClick={() =&gt; setShowSubscriptionPopup(false)} title=&quot;Close&quot;&gt;&amp;#10005;&lt;/span&gt;&#10;                                            &lt;div className=&quot;exit-popup-title&quot;&gt;Activate Subscription&lt;/div&gt;&#10;                                            &lt;div className=&quot;subscription-form&quot;&gt;&#10;                                                &lt;div className=&quot;form-field&quot;&gt;&#10;                                                    &lt;label htmlFor=&quot;subscription-vehicle-number&quot; className=&quot;form-label&quot;&gt;Vehicle Number:&lt;/label&gt;&#10;                                                    &lt;input&#10;                                                        type=&quot;text&quot;&#10;                                                        id=&quot;subscription-vehicle-number&quot;&#10;                                                        name=&quot;vehicleNumber&quot;&#10;                                                        className=&quot;form-input&quot;&#10;                                                        value={subscriptionData.vehicleNumber}&#10;                                                        onChange={(e) =&gt; {&#10;                                                            const value = e.target.value.toUpperCase();&#10;                                                            handleSubscriptionFormChange({&#10;                                                                target: {&#10;                                                                    name: 'vehicleNumber',&#10;                                                                    value: value&#10;                                                                }&#10;                                                            });&#10;                                                        }}&#10;                                                    /&gt;&#10;                                                    {subscriptionErrors.vehicleNumber &amp;&amp; (&#10;                                                        &lt;div className=&quot;form-error&quot;&gt;{subscriptionErrors.vehicleNumber}&lt;/div&gt;&#10;                                                    )}&#10;                                                &lt;/div&gt;&#10;&#10;                                                {/* Horizontal layout for Vehicle Type and Subscription Frequency */}&#10;                                                &lt;div style={{ display: 'flex', gap: '15px' }}&gt;&#10;                                                    &lt;div className=&quot;form-field&quot; style={{ flex: 1 }}&gt;&#10;                                                        &lt;label htmlFor=&quot;subscription-vehicle-type&quot; className=&quot;form-label&quot;&gt;Vehicle Type:&lt;/label&gt;&#10;                                                        &lt;select&#10;                                                            id=&quot;subscription-vehicle-type&quot;&#10;                                                            name=&quot;vehicleType&quot;&#10;                                                            className=&quot;form-select&quot;&#10;                                                            value={subscriptionData.vehicleType}&#10;                                                            onChange={handleSubscriptionFormChange}&#10;                                                            style={{ width: '100%' }}&#10;                                                        &gt;&#10;                                                            &lt;option value=&quot;Car&quot;&gt;Car&lt;/option&gt;&#10;                                                            &lt;option value=&quot;Bike&quot;&gt;Bike&lt;/option&gt;&#10;                                                            &lt;option value=&quot;Truck&quot;&gt;Truck&lt;/option&gt;&#10;                                                            &lt;option value=&quot;SUV&quot;&gt;SUV&lt;/option&gt;&#10;                                                        &lt;/select&gt;&#10;                                                        {subscriptionErrors.vehicleType &amp;&amp; (&#10;                                                            &lt;div className=&quot;form-error&quot;&gt;{subscriptionErrors.vehicleType}&lt;/div&gt;&#10;                                                        )}&#10;                                                    &lt;/div&gt;&#10;&#10;                                                    &lt;div className=&quot;form-field&quot; style={{ flex: 1 }}&gt;&#10;                                                        &lt;label htmlFor=&quot;subscription-frequency&quot; className=&quot;form-label&quot;&gt;Subscription Frequency:&lt;/label&gt;&#10;                                                        &lt;select&#10;                                                            id=&quot;subscription-frequency&quot;&#10;                                                            name=&quot;subscriptionFrequency&quot;&#10;                                                            className=&quot;form-select&quot;&#10;                                                            value={subscriptionData.subscriptionFrequency}&#10;                                                            onChange={handleSubscriptionFormChange}&#10;                                                            style={{ width: '100%' }}&#10;                                                        &gt;&#10;                                                            &lt;option value=&quot;Monthly&quot;&gt;Monthly&lt;/option&gt;&#10;                                                            &lt;option value=&quot;Quarterly&quot;&gt;Quarterly&lt;/option&gt;&#10;                                                            &lt;option value=&quot;Half-yearly&quot;&gt;Half-yearly&lt;/option&gt;&#10;                                                            &lt;option value=&quot;Yearly&quot;&gt;Yearly&lt;/option&gt;&#10;                                                        &lt;/select&gt;&#10;                                                        {subscriptionErrors.subscriptionFrequency &amp;&amp; (&#10;                                                            &lt;div className=&quot;form-error&quot;&gt;{subscriptionErrors.subscriptionFrequency}&lt;/div&gt;&#10;                                                        )}&#10;                                                    &lt;/div&gt;&#10;                                                &lt;/div&gt;&#10;&#10;                                                &lt;div className=&quot;form-field&quot;&gt;&#10;                                                    &lt;label htmlFor=&quot;subscription-type&quot; className=&quot;form-label&quot;&gt;Subscription Type:&lt;/label&gt;&#10;                                                    &lt;select&#10;                                                        id=&quot;subscription-type&quot;&#10;                                                        name=&quot;subscriptionType&quot;&#10;                                                        className=&quot;form-select&quot;&#10;                                                        value={subscriptionData.subscriptionType}&#10;                                                        onChange={handleSubscriptionFormChange}&#10;                                                    &gt;&#10;                                                        &lt;option value=&quot;PREMIUM&quot;&gt;PREMIUM&lt;/option&gt;&#10;                                                        &lt;option value=&quot;ELITE&quot;&gt;ELITE&lt;/option&gt;&#10;                                                        &lt;option value=&quot;SUPER&quot;&gt;SUPER&lt;/option&gt;&#10;                                                    &lt;/select&gt;&#10;                                                    {subscriptionErrors.subscriptionType &amp;&amp; (&#10;                                                        &lt;div className=&quot;form-error&quot;&gt;{subscriptionErrors.subscriptionType}&lt;/div&gt;&#10;                                                    )}&#10;                                                &lt;/div&gt;&#10;&#10;                                                &lt;div className=&quot;form-field&quot;&gt;&#10;                                                    &lt;label className=&quot;form-label&quot;&gt;&lt;b&gt;Parking Lot:&lt;/b&gt;&lt;/label&gt;&#10;                                                    &lt;span className=&quot;form-value&quot;&gt;{parkingLotName}&lt;/span&gt;&#10;                                                &lt;/div&gt;&#10;&#10;                                                {/* Subscription Charge Field */}&#10;                                                &lt;div className=&quot;form-field&quot; style={{ backgroundColor: '#f8f8f8', padding: '10px', borderRadius: '4px', marginTop: '10px' }}&gt;&#10;                                                    &lt;label className=&quot;form-label&quot;&gt;&lt;b&gt;Subscription Charge:&lt;/b&gt;&lt;/label&gt;&#10;                                                    &lt;div style={{ display: 'flex', justifyContent: 'space-between', marginTop: '5px' }}&gt;&#10;                                                        &lt;div&gt;&#10;                                                            &lt;span className=&quot;form-value&quot; style={{ fontSize: '1.1em' }}&gt;&#10;                                                                ₹{calculateSubscriptionCharge(&#10;                                                                    subscriptionData.subscriptionType,&#10;                                                                    subscriptionData.subscriptionFrequency,&#10;                                                                    subscriptionData.vehicleType&#10;                                                                ).monthly}&#10;                                                            &lt;/span&gt;&#10;                                                            &lt;span style={{ fontSize: '0.9em', color: '#666' }}&gt; / month&lt;/span&gt;&#10;                                                        &lt;/div&gt;&#10;                                                        &lt;div&gt;&#10;                                                            &lt;span className=&quot;form-label&quot; style={{ fontWeight: 'bold', color: '#a57b0a' }}&gt;Total: &lt;/span&gt;&#10;                                                            &lt;span className=&quot;form-value&quot; style={{ fontWeight: 'bold', fontSize: '1.1em', color: '#a57b0a' }}&gt;&#10;                                                                ₹{calculateSubscriptionCharge(&#10;                                                                    subscriptionData.subscriptionType,&#10;                                                                    subscriptionData.subscriptionFrequency,&#10;                                                                    subscriptionData.vehicleType&#10;                                                                ).total}&#10;                                                            &lt;/span&gt;&#10;                                                        &lt;/div&gt;&#10;                                                    &lt;/div&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;&#10;                                            {/* Benefits Section */}&#10;                                            &lt;div className=&quot;subscription-benefits&quot; style={{ marginTop: '15px', marginBottom: '15px', border: '1px solid #ddd', padding: '10px', borderRadius: '4px' }}&gt;&#10;                                                &lt;h4 style={{ marginTop: '0', marginBottom: '10px' }}&gt;Benefits:&lt;/h4&gt;&#10;                                                &lt;ul style={{ paddingLeft: '20px', margin: '0' }}&gt;&#10;                                                    {getSubscriptionBenefits(subscriptionData.subscriptionType).map((benefit, index) =&gt; (&#10;                                                        &lt;li key={index} style={{ marginBottom: '5px' }}&gt;{benefit}&lt;/li&gt;&#10;                                                    ))}&#10;                                                &lt;/ul&gt;&#10;                                            &lt;/div&gt;&#10;&#10;                                            &lt;button&#10;                                                className=&quot;confirm-exit-btn&quot;&#10;                                                onClick={handleSubscriptionSubmit}&#10;                                            &gt;&#10;                                                Subscribe&#10;                                            &lt;/button&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/&gt;&#10;                                )}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;} /&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;/Routes&gt;&#10;&#9;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;&#9;} /&gt;&#10;&#9;&#9;&lt;/Routes&gt;&#10;&#9;);&#10;};&#10;&#10;export default EmployeeDashboard;&#10;" />
              <option name="updatedContent" value="import React, { useState } from 'react';&#10;import { CredentialStore } from '../Login/Login';&#10;import Header from '../Header';&#10;import Sidebar from './Sidebar';&#10;import './EmployeeDashboard.css';&#10;import './Dashboard.css'; // Import Dashboard-specific CSS&#10;import '../dashboard/parking-history/ParkingHistory.css'; // Import ParkingHistory CSS for consistent styling&#10;import { QRCodeSVG } from 'qrcode.react';&#10;import { Routes, Route } from 'react-router-dom';&#10;import ParkingHistory from './parking-history/ParkingHistory';&#10;import ParkingStatus from './parking-status/ParkingStatus';&#10;import FareDetails from './fare-details/FareDetails';&#10;import ParkingBooking from './parking-booking/ParkingBooking';&#10;import Subscription from './subscription/Subscription';&#10;import LostComplaint from './lost-complaint/LostComplaint';&#10;&#10;// Mock vehicle details&#10;const VEHICLE_DETAILS = [&#10;&#9;{&#10;&#9;&#9;vehicleNumber: 'MH12AB1234',&#10;&#9;&#9;vehicleType: 'Car',&#10;&#9;&#9;entryTime: '2025-09-24 09:15',&#10;&#9;&#9;allotedBy: 'John Doe',&#10;&#9;&#9;exitBy: '',&#10;&#9;&#9;fare: 120,&#10;&#9;&#9;exitTime: '',&#10;&#9;&#9;locked: false,&#10;&#9;},&#10;&#9;{&#10;&#9;&#9;vehicleNumber: 'MH14XY5678',&#10;&#9;&#9;vehicleType: 'Bike',&#10;&#9;&#9;entryTime: '2025-09-24 10:05',&#10;&#9;&#9;allotedBy: 'Jane Smith',&#10;&#9;&#9;exitBy: '',&#10;&#9;&#9;fare: 60,&#10;&#9;&#9;exitTime: '',&#10;&#9;&#9;locked: false,&#10;&#9;},&#10;&#9;// Add more vehicles as needed&#10;];&#10;&#10;const EmployeeDashboard = () =&gt; {&#10;&#9;const employeeName = CredentialStore.name;&#10;&#9;const employeeId = CredentialStore.employeeId;&#10;    const parkingLotName = CredentialStore.parkingLot || 'Candor Parking'; // Updated parking lot name&#10;&#9;const [vehicles, setVehicles] = useState(VEHICLE_DETAILS);&#10;&#9;const [showExitPopup, setShowExitPopup] = useState(false);&#10;&#9;const [selectedVehicle, setSelectedVehicle] = useState(null);&#10;&#9;const [sidebarCollapsed, setSidebarCollapsed] = useState(false);&#10;&#9;const [paymentMethod, setPaymentMethod] = useState('CASH');&#10;    const [showCheckInPopup, setShowCheckInPopup] = useState(false);&#10;&#10;    // New state for lock functionality&#10;    const [showLockPopup, setShowLockPopup] = useState(false);&#10;    const [lockReason, setLockReason] = useState('');&#10;    const [lockReasonError, setLockReasonError] = useState('');&#10;    const [charCount, setCharCount] = useState(0); // Character counter for lock reason&#10;&#10;    // New state for subscription popup&#10;    const [showSubscriptionPopup, setShowSubscriptionPopup] = useState(false);&#10;    const [subscriptionData, setSubscriptionData] = useState({&#10;        vehicleNumber: '',&#10;        vehicleType: 'Car',&#10;        subscriptionType: 'PREMIUM',&#10;        subscriptionFrequency: 'Monthly'&#10;    });&#10;    const [subscriptionErrors, setSubscriptionErrors] = useState({});&#10;&#10;    // Function to get subscription benefits based on type&#10;    const getSubscriptionBenefits = (type) =&gt; {&#10;        switch(type) {&#10;            case 'PREMIUM':&#10;                return [&#10;                    &quot;Priority parking spots&quot;,&#10;                    &quot;24/7 customer support&quot;,&#10;                    &quot;20% discount on monthly rates&quot;,&#10;                    &quot;Free car wash once a month&quot;&#10;                ];&#10;            case 'ELITE':&#10;                return [&#10;                    &quot;Reserved premium parking spots&quot;,&#10;                    &quot;24/7 priority customer support&quot;,&#10;                    &quot;35% discount on monthly rates&quot;,&#10;                    &quot;Weekly car wash service&quot;,&#10;                    &quot;Valet parking service&quot;&#10;                ];&#10;            case 'SUPER':&#10;                return [&#10;                    &quot;VIP reserved parking spots&quot;,&#10;                    &quot;Dedicated customer relationship manager&quot;,&#10;                    &quot;50% discount on monthly rates&quot;,&#10;                    &quot;Bi-weekly car wash and detailing&quot;,&#10;                    &quot;Valet parking service&quot;&#10;                ];&#10;            default:&#10;                return [&quot;No benefits available&quot;];&#10;        }&#10;    };&#10;&#10;    // Function to calculate subscription charge based on type and frequency&#10;    const calculateSubscriptionCharge = (type, frequency, vehicleType) =&gt; {&#10;        // Base monthly rates&#10;        let baseRate = 0;&#10;&#10;        // Set base rate according to vehicle type&#10;        switch(vehicleType) {&#10;            case 'Bike':&#10;                baseRate = 500; // Base rate for bike&#10;                break;&#10;            case 'Car':&#10;                baseRate = 1000; // Base rate for car&#10;                break;&#10;            case 'SUV':&#10;                baseRate = 1500; // Base rate for SUV&#10;                break;&#10;            case 'Truck':&#10;                baseRate = 2000; // Base rate for truck&#10;                break;&#10;            default:&#10;                baseRate = 1000;&#10;        }&#10;&#10;        // Multiply by subscription type factor&#10;        let typeFactor = 1;&#10;        switch(type) {&#10;            case 'PREMIUM':&#10;                typeFactor = 1.2; // 20% premium&#10;                break;&#10;            case 'ELITE':&#10;                typeFactor = 1.5; // 50% premium&#10;                break;&#10;            case 'SUPER':&#10;                typeFactor = 2; // 100% premium&#10;                break;&#10;            default:&#10;                typeFactor = 1;&#10;        }&#10;&#10;        // Calculate based on frequency with discount for longer subscriptions&#10;        let frequencyFactor = 1;&#10;        let months = 1;&#10;&#10;        switch(frequency) {&#10;            case 'Monthly':&#10;                months = 1;&#10;                frequencyFactor = 1; // No discount for monthly&#10;                break;&#10;            case 'Quarterly':&#10;                months = 3;&#10;                frequencyFactor = 0.9; // 10% discount for quarterly&#10;                break;&#10;            case 'Half-yearly':&#10;                months = 6;&#10;                frequencyFactor = 0.85; // 15% discount for half-yearly&#10;                break;&#10;            case 'Yearly':&#10;                months = 12;&#10;                frequencyFactor = 0.8; // 20% discount for yearly&#10;                break;&#10;            default:&#10;                months = 1;&#10;                frequencyFactor = 1;&#10;        }&#10;&#10;        // Calculate total charge&#10;        const monthlyCharge = baseRate * typeFactor * frequencyFactor;&#10;        const totalCharge = monthlyCharge * months;&#10;&#10;        return {&#10;            monthly: Math.round(monthlyCharge),&#10;            total: Math.round(totalCharge)&#10;        };&#10;    };&#10;&#10;    // New state for details popup&#10;    const [showDetailsPopup, setShowDetailsPopup] = useState(false);&#10;    const [showUnlockPopup, setShowUnlockPopup] = useState(false);&#10;    const [unlockPaymentMethod, setUnlockPaymentMethod] = useState('CASH');&#10;    const [unlockFee, setUnlockFee] = useState(200); // Default unlock fee&#10;&#10;    // New state for check-in form&#10;    const [checkInData, setCheckInData] = useState({&#10;        vehicleNumber: '',&#10;        vehicleType: 'Car',&#10;        parkingType: 'Hourly'&#10;    });&#10;&#10;    // Available slots state (in a real application, this would be fetched from a backend)&#10;    const [availableSlots, setAvailableSlots] = useState({&#10;        Car: 45,&#10;        Bike: 80,&#10;        Truck: 15,&#10;        SUV: 30&#10;    });&#10;&#10;    // Add form validation state&#10;    const [formErrors, setFormErrors] = useState({});&#10;&#10;    // Handle form field changes&#10;    const handleCheckInFormChange = (e) =&gt; {&#10;        const { name, value } = e.target;&#10;&#10;        // Convert vehicle number to uppercase&#10;        const processedValue = name === 'vehicleNumber' ? value.toUpperCase() : value;&#10;&#10;        setCheckInData(prevData =&gt; ({&#10;            ...prevData,&#10;            [name]: processedValue&#10;        }));&#10;&#10;        // Clear error for this field when user types&#10;        if (formErrors[name]) {&#10;            setFormErrors(prev =&gt; ({&#10;                ...prev,&#10;                [name]: ''&#10;            }));&#10;        }&#10;    };&#10;&#10;    // Validate form fields&#10;    const validateForm = () =&gt; {&#10;        const errors = {};&#10;&#10;        // Check vehicle number&#10;        if (!checkInData.vehicleNumber.trim()) {&#10;            errors.vehicleNumber = &quot;Vehicle number is required&quot;;&#10;        }&#10;&#10;        // Check vehicle type&#10;        if (!checkInData.vehicleType) {&#10;            errors.vehicleType = &quot;Please select a vehicle type&quot;;&#10;        }&#10;&#10;        // Check parking type&#10;        if (!checkInData.parkingType) {&#10;            errors.parkingType = &quot;Please select a parking type&quot;;&#10;        }&#10;&#10;        setFormErrors(errors);&#10;        return Object.keys(errors).length === 0;&#10;    };&#10;&#10;    // Handle check-in form submission&#10;    const handleCheckInSubmit = () =&gt; {&#10;        // Validate form&#10;        const isValid = validateForm();&#10;&#10;        if (!isValid) {&#10;            return; // Don't proceed if validation fails&#10;        }&#10;&#10;        // Here you would typically send the data to your backend&#10;        // For now, let's add it to the vehicles list&#10;        const newVehicle = {&#10;            vehicleNumber: checkInData.vehicleNumber,&#10;            vehicleType: checkInData.vehicleType,&#10;            entryTime: new Date().toLocaleString(),&#10;            allotedBy: employeeName,&#10;            exitBy: '',&#10;            fare: 0, // This would be calculated based on parking type&#10;            exitTime: '',&#10;            locked: false,&#10;            parkingType: checkInData.parkingType&#10;        };&#10;&#10;        // Add the new vehicle to the list&#10;        setVehicles([newVehicle, ...vehicles]);&#10;&#10;        // Reset form data&#10;        setCheckInData({&#10;            vehicleNumber: '',&#10;            vehicleType: 'Car',&#10;            parkingType: 'Hourly'&#10;        });&#10;&#10;        // Clear any errors&#10;        setFormErrors({});&#10;&#10;        // Close the popup&#10;        setShowCheckInPopup(false);&#10;    };&#10;&#10;&#9;const handleExitClick = (vehicle) =&gt; {&#10;&#9;&#9;// Set exit time to now for demo&#10;&#9;&#9;setSelectedVehicle({ ...vehicle, exitTime: new Date().toLocaleString() });&#10;&#9;&#9;setShowExitPopup(true);&#10;&#9;};&#10;&#10;&#9;const handleConfirmExit = () =&gt; {&#10;&#9;&#9;// Update vehicle exitBy and exitTime&#10;&#9;&#9;setVehicles(&#10;&#9;&#9;&#9;vehicles.map((v) =&gt;&#10;&#9;&#9;&#9;&#9;v.vehicleNumber === selectedVehicle.vehicleNumber&#10;&#9;&#9;&#9;&#9;&#9;? { ...v, exitBy: employeeName, exitTime: selectedVehicle.exitTime }&#10;&#9;&#9;&#9;&#9;&#9;: v&#10;&#9;&#9;&#9;)&#10;&#9;&#9;);&#10;&#9;&#9;setShowExitPopup(false);&#10;&#9;&#9;setSelectedVehicle(null);&#10;&#9;};&#10;&#10;&#9;function getGreeting() {&#10;&#9;&#9;const hour = new Date().getHours();&#10;&#9;&#9;if (hour &lt; 12) return 'Good Morning';&#10;&#9;&#9;if (hour &lt; 17) return 'Good Afternoon';&#10;&#9;&#9;return 'Good Evening';&#10;&#9;}&#10;    // Handle Check In button click&#10;    const handleCheckInClick = () =&gt; {&#10;        setShowCheckInPopup(true);&#10;    };&#10;&#10;    // Handle Lock button click&#10;    const handleLockClick = (vehicle) =&gt; {&#10;        setSelectedVehicle(vehicle);&#10;        setLockReason('');&#10;        setLockReasonError('');&#10;        setCharCount(0);&#10;        setShowLockPopup(true);&#10;    };&#10;&#10;    // Handle Lock reason input change&#10;    const handleLockReasonChange = (e) =&gt; {&#10;        const value = e.target.value;&#10;        // Only update if within the 150 character limit&#10;        if (value.length &lt;= 150) {&#10;            setLockReason(value);&#10;            setCharCount(value.length);&#10;            // Clear error when user types&#10;            if (lockReasonError) {&#10;                setLockReasonError('');&#10;            }&#10;        }&#10;    };&#10;&#10;    // Handle Lock confirmation&#10;    const handleLockConfirm = () =&gt; {&#10;        // Validate lock reason (minimum 30 characters)&#10;        if (!lockReason.trim()) {&#10;            setLockReasonError('Please provide a reason for locking the vehicle');&#10;            return;&#10;        } else if (lockReason.trim().length &lt; 30) {&#10;            setLockReasonError(`Reason must be at least 30 characters (currently ${lockReason.trim().length})`);&#10;            return;&#10;        }&#10;&#10;        // Update vehicle locked status&#10;        setVehicles(&#10;            vehicles.map((v) =&gt;&#10;                v.vehicleNumber === selectedVehicle.vehicleNumber&#10;                    ? { ...v, locked: true, lockReason: lockReason, lockedBy: employeeName, lockTime: new Date().toLocaleString() }&#10;                    : v&#10;            )&#10;        );&#10;&#10;        // Close popup and reset fields&#10;        setShowLockPopup(false);&#10;        setLockReason('');&#10;        setCharCount(0);&#10;        setSelectedVehicle(null);&#10;    };&#10;&#10;    // Handle Details button click (for locked vehicles)&#10;    const handleDetailsClick = (vehicle) =&gt; {&#10;        setSelectedVehicle(vehicle);&#10;        setShowDetailsPopup(true);&#10;    };&#10;&#10;    // Handle Unlock button click&#10;    const handleUnlockClick = () =&gt; {&#10;        setUnlockPaymentMethod('CASH');&#10;        setShowDetailsPopup(false);&#10;        setShowUnlockPopup(true);&#10;    };&#10;&#10;    // Handle Unlock confirmation&#10;    const handleUnlockConfirm = () =&gt; {&#10;        // Update vehicle locked status&#10;        setVehicles(&#10;            vehicles.map((v) =&gt;&#10;                v.vehicleNumber === selectedVehicle.vehicleNumber&#10;                    ? {&#10;                        ...v,&#10;                        locked: false,&#10;                        unlockTime: new Date().toLocaleString(),&#10;                        unlockBy: employeeName,&#10;                        unlockPaymentMethod: unlockPaymentMethod,&#10;                        unlockFee: unlockFee&#10;                      }&#10;                    : v&#10;            )&#10;        );&#10;&#10;        // Close popup and reset&#10;        setShowUnlockPopup(false);&#10;        setSelectedVehicle(null);&#10;    };&#10;&#10;    // Handle Subscription button click&#10;    const handleSubscriptionClick = () =&gt; {&#10;        setSelectedVehicle(null);&#10;        setSubscriptionData({&#10;            vehicleNumber: '',&#10;            vehicleType: 'Car',&#10;            subscriptionType: 'PREMIUM',&#10;            subscriptionFrequency: 'Monthly'&#10;        });&#10;        setShowSubscriptionPopup(true);&#10;    };&#10;&#10;    // Handle Subscription form field change&#10;    const handleSubscriptionFormChange = (e) =&gt; {&#10;        const { name, value } = e.target;&#10;&#10;        setSubscriptionData(prevData =&gt; ({&#10;            ...prevData,&#10;            [name]: value&#10;        }));&#10;    };&#10;&#10;    // Validate Subscription form&#10;    const validateSubscriptionForm = () =&gt; {&#10;        const errors = {};&#10;&#10;        // Check vehicle number&#10;        if (!subscriptionData.vehicleNumber.trim()) {&#10;            errors.vehicleNumber = &quot;Vehicle number is required&quot;;&#10;        }&#10;&#10;        // Check vehicle type&#10;        if (!subscriptionData.vehicleType) {&#10;            errors.vehicleType = &quot;Please select a vehicle type&quot;;&#10;        }&#10;&#10;        // Check subscription type&#10;        if (!subscriptionData.subscriptionType) {&#10;            errors.subscriptionType = &quot;Please select a subscription type&quot;;&#10;        }&#10;&#10;        // Check subscription frequency&#10;        if (!subscriptionData.subscriptionFrequency) {&#10;            errors.subscriptionFrequency = &quot;Please select a subscription frequency&quot;;&#10;        }&#10;&#10;        setSubscriptionErrors(errors);&#10;        return Object.keys(errors).length === 0;&#10;    };&#10;&#10;    // Handle Subscription form submission&#10;    const handleSubscriptionSubmit = () =&gt; {&#10;        // Validate form&#10;        const isValid = validateSubscriptionForm();&#10;&#10;        if (!isValid) {&#10;            return; // Don't proceed if validation fails&#10;        }&#10;&#10;        // Here you would typically send the subscription data to your backend&#10;        // For now, let's just log it&#10;        console.log(&quot;Subscription Data:&quot;, subscriptionData);&#10;&#10;        // Close the popup&#10;        setShowSubscriptionPopup(false);&#10;    };&#10;&#10;&#9;return (&#10;&#9;&#9;&lt;Routes&gt;&#10;&#9;&#9;&#9;&lt;Route path=&quot;/*&quot; element={&#10;&#9;&#9;&#9;&#9;&lt;div&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;Header&#10;&#9;&#9;&#9;&#9;&#9;&#9;user={{ name: employeeName, employeeId: employeeId }}&#10;&#9;&#9;&#9;&#9;&#9;&#9;showAdmin={false}&#10;&#9;&#9;&#9;&#9;&#9;&#9;showRegister={false}&#10;&#9;&#9;&#9;&#9;&#9;&#9;onHamburgerClick={() =&gt; setSidebarCollapsed((collapsed) =&gt; !collapsed)}&#10;&#9;&#9;&#9;&#9;&#9;/&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;Sidebar collapsed={sidebarCollapsed} /&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;Routes&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;Route path=&quot;parking-history&quot; element={&lt;ParkingHistory sidebarCollapsed={sidebarCollapsed} /&gt;} /&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;Route path=&quot;fare-details&quot; element={&lt;FareDetails sidebarCollapsed={sidebarCollapsed} /&gt;} /&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;Route path=&quot;parking-booking&quot; element={&lt;ParkingBooking sidebarCollapsed={sidebarCollapsed} /&gt;} /&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;Route path=&quot;subscription&quot; element={&lt;Subscription sidebarCollapsed={sidebarCollapsed} /&gt;} /&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;Route path=&quot;lost-complaint&quot; element={&lt;LostComplaint sidebarCollapsed={sidebarCollapsed} /&gt;} /&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;Route path=&quot;parking-status&quot; element={&lt;ParkingStatus sidebarCollapsed={sidebarCollapsed} /&gt;} /&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&lt;Route path=&quot;/&quot; element={&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;div className={`parking-history-container ${sidebarCollapsed ? 'collapsed' : 'expanded'}`}&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;h2 className=&quot;dashboard-title&quot;&gt;{getGreeting()}, {employeeName || 'Employee'}!&lt;/h2&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;div className=&quot;employee-info&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;span&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;b&gt;Employee ID:&lt;/b&gt; {employeeId || '-'}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/span&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/div&gt;&#10;&#10;                                &lt;div className=&quot;dashboard-actions&quot;&gt;&#10;                                    &lt;h3 className=&quot;dashboard-subtitle&quot;&gt;Vehicle Details&lt;/h3&gt;&#10;                                    &lt;div&gt;&#10;                                        &lt;button className=&quot;check-in-btn&quot; onClick={handleCheckInClick}&gt;&#10;                                            Check In&#10;                                        &lt;/button&gt;&#10;                                        &lt;button className=&quot;subscription-btn&quot; onClick={handleSubscriptionClick} style={{ marginLeft: '10px' }}&gt;&#10;                                            Activate Subscription&#10;                                        &lt;/button&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;div className=&quot;table-wrapper&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;table className=&quot;parking-history-table&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;thead&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;tr&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;th&gt;Vehicle Number&lt;/th&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;th&gt;Vehicle Type&lt;/th&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;th&gt;Entry Time&lt;/th&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;th&gt;Alloted By&lt;/th&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;th&gt;Exit By&lt;/th&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;th&gt;Action&lt;/th&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/tr&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/thead&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;tbody&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;{vehicles.map((vehicle) =&gt; (&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;tr key={vehicle.vehicleNumber} className={vehicle.locked ? 'locked-vehicle-row' : ''}&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;td&gt;{vehicle.vehicleNumber}&lt;/td&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;td&gt;{vehicle.vehicleType}&lt;/td&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;td&gt;{vehicle.entryTime}&lt;/td&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;td&gt;{vehicle.allotedBy}&lt;/td&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;td&gt;{vehicle.exitBy || '-'}&lt;/td&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;td style={{ textAlign: 'center' }}&gt;&#10;                                                        {vehicle.locked ? (&#10;                                                            // Show Details button if vehicle is locked&#10;                                                            &lt;button&#10;                                                                className=&quot;details-btn&quot;&#10;                                                                onClick={() =&gt; handleDetailsClick(vehicle)}&#10;                                                            &gt;&#10;                                                                Details&#10;                                                            &lt;/button&gt;&#10;                                                        ) : (&#10;                                                            // Show Lock and Exit buttons if vehicle is not locked&#10;                                                            &lt;&gt;&#10;                                                                &lt;button&#10;                                                                    className=&quot;lock-btn&quot;&#10;                                                                    style={{ marginRight: '0.5rem' }}&#10;                                                                    disabled={!!vehicle.exitBy}&#10;                                                                    onClick={() =&gt; handleLockClick(vehicle)}&#10;                                                                &gt;&#10;                                                                    Lock&#10;                                                                &lt;/button&gt;&#10;                                                                &lt;button&#10;                                                                    className=&quot;exit-btn&quot;&#10;                                                                    disabled={!!vehicle.exitBy}&#10;                                                                    onClick={() =&gt; handleExitClick(vehicle)}&#10;                                                                &gt;&#10;                                                                    Exit&#10;                                                                &lt;/button&gt;&#10;                                                            &lt;/&gt;&#10;                                                        )}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/td&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/tr&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;))}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/tbody&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/table&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/div&gt;&#10;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;{/* Exit Popup */}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;{showExitPopup &amp;&amp; selectedVehicle &amp;&amp; (&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;div className=&quot;exit-popup-overlay&quot; onClick={() =&gt; setShowExitPopup(false)}&gt;&lt;/div&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;div className=&quot;exit-popup-card logo-theme&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;span className=&quot;exit-popup-close&quot; onClick={() =&gt; setShowExitPopup(false)} title=&quot;Close&quot;&gt;&amp;#10005;&lt;/span&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;div className=&quot;exit-popup-title&quot;&gt;Parking Charge Details&lt;/div&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;table className=&quot;exit-popup-details-table&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;tbody&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;tr&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;td className=&quot;exit-popup-detail-label&quot;&gt;&lt;b&gt;Vehicle Number:&lt;/b&gt;&lt;/td&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;td className=&quot;exit-popup-detail-value&quot;&gt;{selectedVehicle.vehicleNumber}&lt;/td&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/tr&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;tr&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;td className=&quot;exit-popup-detail-label&quot;&gt;&lt;b&gt;Entry Time:&lt;/b&gt;&lt;/td&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;td className=&quot;exit-popup-detail-value&quot;&gt;{selectedVehicle.entryTime}&lt;/td&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/tr&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;tr&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;td className=&quot;exit-popup-detail-label&quot;&gt;&lt;b&gt;Exit Time:&lt;/b&gt;&lt;/td&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;td className=&quot;exit-popup-detail-value&quot;&gt;{selectedVehicle.exitTime}&lt;/td&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/tr&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;tr&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;td className=&quot;exit-popup-detail-label&quot;&gt;&lt;b&gt;Fare:&lt;/b&gt;&lt;/td&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;td className=&quot;exit-popup-detail-value&quot;&gt;₹{selectedVehicle.fare}&lt;/td&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/tr&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/tbody&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/table&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;div className=&quot;exit-popup-payment-method&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;label htmlFor=&quot;payment-method&quot; className=&quot;exit-popup-detail-label&quot;&gt;Payment Method:&lt;/label&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;select&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;id=&quot;payment-method&quot;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;className=&quot;exit-popup-payment-dropdown&quot;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;value={paymentMethod}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;onChange={e =&gt; setPaymentMethod(e.target.value)}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;option value=&quot;CASH&quot;&gt;CASH&lt;/option&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;option value=&quot;Card&quot;&gt;Card&lt;/option&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;option value=&quot;UPI&quot;&gt;UPI&lt;/option&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/select&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;{paymentMethod === 'UPI' &amp;&amp; (&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;div className=&quot;exit-popup-qr-section&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;div className=&quot;exit-popup-detail-label&quot; style={{marginBottom: '0.5rem'}}&gt;Scan to pay via UPI:&lt;/div&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;QRCodeSVG&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;value=&quot;upi://pay?pa=test@upi&amp;pn=TestUser&amp;am=100&quot;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;size={128}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;bgColor=&quot;#fffbe6&quot;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9; fgColor=&quot;#a57b0a&quot;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;className=&quot;exit-popup-qr-code&quot;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;/&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;)}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;button&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;className=&quot;confirm-exit-btn&quot;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;onClick={handleConfirmExit}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;Confirm&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/button&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;)}&#10;&#10;                                {/* Check In Popup */}&#10;                                {showCheckInPopup &amp;&amp; (&#10;                                    &lt;&gt;&#10;                                        &lt;div className=&quot;exit-popup-overlay&quot; onClick={() =&gt; setShowCheckInPopup(false)}&gt;&lt;/div&gt;&#10;                                        &lt;div className=&quot;exit-popup-card logo-theme&quot;&gt;&#10;                                            &lt;span className=&quot;exit-popup-close&quot; onClick={() =&gt; setShowCheckInPopup(false)} title=&quot;Close&quot;&gt;&amp;#10005;&lt;/span&gt;&#10;                                            &lt;div className=&quot;exit-popup-title&quot;&gt;Check In Vehicle&lt;/div&gt;&#10;                                            &lt;div className=&quot;check-in-form&quot;&gt;&#10;                                                &lt;div className=&quot;form-field&quot;&gt;&#10;                                                    &lt;label htmlFor=&quot;vehicle-number&quot; className=&quot;form-label&quot;&gt;Vehicle Number:&lt;/label&gt;&#10;                                                    &lt;input&#10;                                                        type=&quot;text&quot;&#10;                                                        id=&quot;vehicle-number&quot;&#10;                                                        name=&quot;vehicleNumber&quot;&#10;                                                        className=&quot;form-input&quot;&#10;                                                        value={checkInData.vehicleNumber}&#10;                                                        onChange={handleCheckInFormChange}&#10;                                                    /&gt;&#10;                                                    {formErrors.vehicleNumber &amp;&amp; (&#10;                                                        &lt;div className=&quot;form-error&quot;&gt;{formErrors.vehicleNumber}&lt;/div&gt;&#10;                                                    )}&#10;                                                &lt;/div&gt;&#10;                                                &lt;div className=&quot;form-field&quot;&gt;&#10;                                                    &lt;label htmlFor=&quot;vehicle-type&quot; className=&quot;form-label&quot;&gt;Vehicle Type:&lt;/label&gt;&#10;                                                    &lt;select&#10;                                                        id=&quot;vehicle-type&quot;&#10;                                                        name=&quot;vehicleType&quot;&#10;                                                        className=&quot;form-select&quot;&#10;                                                        value={checkInData.vehicleType}&#10;                                                        onChange={handleCheckInFormChange}&#10;                                                    &gt;&#10;                                                        &lt;option value=&quot;Car&quot;&gt;Car&lt;/option&gt;&#10;                                                        &lt;option value=&quot;Bike&quot;&gt;Bike&lt;/option&gt;&#10;                                                        &lt;option value=&quot;Truck&quot;&gt;Truck&lt;/option&gt;&#10;                                                        {/* Add more vehicle types as needed */}&#10;                                                    &lt;/select&gt;&#10;                                                    {formErrors.vehicleType &amp;&amp; (&#10;                                                        &lt;div className=&quot;form-error&quot;&gt;{formErrors.vehicleType}&lt;/div&gt;&#10;                                                    )}&#10;                                                &lt;/div&gt;&#10;                                                &lt;div className=&quot;form-field&quot;&gt;&#10;                                                    &lt;label htmlFor=&quot;parking-type&quot; className=&quot;form-label&quot;&gt;Parking Type:&lt;/label&gt;&#10;                                                    &lt;select&#10;                                                        id=&quot;parking-type&quot;&#10;                                                        name=&quot;parkingType&quot;&#10;                                                        className=&quot;form-select&quot;&#10;                                                        value={checkInData.parkingType}&#10;                                                        onChange={handleCheckInFormChange}&#10;                                                    &gt;&#10;                                                        &lt;option value=&quot;Hourly&quot;&gt;Hourly&lt;/option&gt;&#10;                                                        &lt;option value=&quot;Daily&quot;&gt;Daily&lt;/option&gt;&#10;                                                        &lt;option value=&quot;Monthly&quot;&gt;Monthly&lt;/option&gt;&#10;                                                    &lt;/select&gt;&#10;                                                    {formErrors.parkingType &amp;&amp; (&#10;                                                        &lt;div className=&quot;form-error&quot;&gt;{formErrors.parkingType}&lt;/div&gt;&#10;                                                    )}&#10;                                                &lt;/div&gt;&#10;&#10;                                                {/* Parking Lot and Available Slots in horizontal layout */}&#10;                                                &lt;div style={{ display: 'flex', gap: '15px' }}&gt;&#10;                                                    &lt;div className=&quot;form-field&quot; style={{ flex: 1 }}&gt;&#10;                                                        &lt;label className=&quot;form-label&quot;&gt;&lt;b&gt;Parking Lot:&lt;/b&gt;&lt;/label&gt;&#10;                                                        &lt;span className=&quot;form-value&quot;&gt;{parkingLotName}&lt;/span&gt;&#10;                                                    &lt;/div&gt;&#10;                                                    &lt;div className=&quot;form-field&quot; style={{ flex: 1, textAlign: 'right' }}&gt;&#10;                                                        &lt;label className=&quot;form-label&quot;&gt;&lt;b&gt;Available Slots:&lt;/b&gt;&lt;/label&gt;&#10;                                                        &lt;span className=&quot;form-value&quot; style={{&#10;                                                            color: availableSlots[checkInData.vehicleType] &lt; 10 ? '#d32f2f' : '#28a745',&#10;                                                            fontWeight: 'bold'&#10;                                                        }}&gt;&#10;                                                            {availableSlots[checkInData.vehicleType] || 0}&#10;                                                        &lt;/span&gt;&#10;                                                    &lt;/div&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;button&#10;                                                className=&quot;confirm-exit-btn&quot;&#10;                                                onClick={handleCheckInSubmit}&#10;                                            &gt;&#10;                                                Submit&#10;                                            &lt;/button&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/&gt;&#10;                                )}&#10;&#10;                                {/* Lock Vehicle Popup */}&#10;                                {showLockPopup &amp;&amp; selectedVehicle &amp;&amp; (&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;div className=&quot;exit-popup-overlay&quot; onClick={() =&gt; setShowLockPopup(false)}&gt;&lt;/div&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;div className=&quot;exit-popup-card logo-theme&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;span className=&quot;exit-popup-close&quot; onClick={() =&gt; setShowLockPopup(false)} title=&quot;Close&quot;&gt;&amp;#10005;&lt;/span&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;div className=&quot;exit-popup-title&quot;&gt;Lock Vehicle&lt;/div&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;div className=&quot;lock-popup-content&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;p&gt;Are you sure you want to lock this vehicle?&lt;/p&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;div className=&quot;form-field&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;label htmlFor=&quot;lock-reason&quot; className=&quot;form-label&quot;&gt;Reason for locking:&lt;/label&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;textarea&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;id=&quot;lock-reason&quot;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;className=&quot;form-textarea&quot;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;value={lockReason}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;onChange={handleLockReasonChange}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;rows=&quot;4&quot;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;placeholder=&quot;Please provide a detailed reason for locking this vehicle (minimum 50 characters required)&quot;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&gt;&lt;/textarea&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;div className=&quot;char-counter&quot;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;span className={charCount &lt; 30 ? 'counter-error' : ''}&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;{charCount}/150 characters&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;{charCount &lt; 30 ? ` (${30 - charCount} more needed)` : ''}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/span&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;{lockReasonError &amp;&amp; (&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;div className=&quot;form-error&quot;&gt;{lockReasonError}&lt;/div&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;)}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;button&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;className=&quot;confirm-exit-btn&quot;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;onClick={handleLockConfirm}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;Confirm Lock&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/button&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;)}&#10;&#10;                                {/* Vehicle Details Popup (for locked vehicles) */}&#10;                                {showDetailsPopup &amp;&amp; selectedVehicle &amp;&amp; (&#10;                                    &lt;&gt;&#10;                                        &lt;div className=&quot;exit-popup-overlay&quot; onClick={() =&gt; setShowDetailsPopup(false)}&gt;&lt;/div&gt;&#10;                                        &lt;div className=&quot;exit-popup-card logo-theme&quot;&gt;&#10;                                            &lt;span className=&quot;exit-popup-close&quot; onClick={() =&gt; setShowDetailsPopup(false)} title=&quot;Close&quot;&gt;&amp;#10005;&lt;/span&gt;&#10;                                            &lt;div className=&quot;exit-popup-title&quot;&gt;Vehicle Lock Details&lt;/div&gt;&#10;                                            &lt;table className=&quot;exit-popup-details-table&quot;&gt;&#10;                                                &lt;tbody&gt;&#10;                                                    &lt;tr&gt;&#10;                                                        &lt;td className=&quot;exit-popup-detail-label&quot;&gt;&lt;b&gt;Vehicle Number:&lt;/b&gt;&lt;/td&gt;&#10;                                                        &lt;td className=&quot;exit-popup-detail-value&quot;&gt;{selectedVehicle.vehicleNumber}&lt;/td&gt;&#10;                                                    &lt;/tr&gt;&#10;                                                    &lt;tr&gt;&#10;                                                        &lt;td className=&quot;exit-popup-detail-label&quot;&gt;&lt;b&gt;Entry Time:&lt;/b&gt;&lt;/td&gt;&#10;                                                        &lt;td className=&quot;exit-popup-detail-value&quot;&gt;{selectedVehicle.entryTime}&lt;/td&gt;&#10;                                                    &lt;/tr&gt;&#10;                                                    &lt;tr&gt;&#10;                                                        &lt;td className=&quot;exit-popup-detail-label&quot;&gt;&lt;b&gt;Locked By:&lt;/b&gt;&lt;/td&gt;&#10;                                                        &lt;td className=&quot;exit-popup-detail-value&quot;&gt;{selectedVehicle.lockedBy}&lt;/td&gt;&#10;                                                    &lt;/tr&gt;&#10;                                                    &lt;tr&gt;&#10;                                                        &lt;td className=&quot;exit-popup-detail-label&quot;&gt;&lt;b&gt;Lock Time:&lt;/b&gt;&lt;/td&gt;&#10;                                                        &lt;td className=&quot;exit-popup-detail-value&quot;&gt;{selectedVehicle.lockTime}&lt;/td&gt;&#10;                                                    &lt;/tr&gt;&#10;                                                &lt;/tbody&gt;&#10;                                            &lt;/table&gt;&#10;                                            &lt;div className=&quot;lock-reason-display&quot;&gt;&#10;                                                &lt;h4 className=&quot;lock-reason-title&quot;&gt;Reason for locking:&lt;/h4&gt;&#10;                                                &lt;p className=&quot;lock-reason-text&quot;&gt;{selectedVehicle.lockReason}&lt;/p&gt;&#10;                                            &lt;/div&gt;&#10;                                            &lt;button&#10;                                                className=&quot;unlock-btn&quot;&#10;                                                onClick={handleUnlockClick}&#10;                                            &gt;&#10;                                                Unlock Vehicle&#10;                                            &lt;/button&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/&gt;&#10;                                )}&#10;&#10;                                {/* Unlock Vehicle Popup with Payment */}&#10;                                {showUnlockPopup &amp;&amp; selectedVehicle &amp;&amp; (&#10;                                    &lt;&gt;&#10;                                        &lt;div className=&quot;exit-popup-overlay&quot; onClick={() =&gt; setShowUnlockPopup(false)}&gt;&lt;/div&gt;&#10;                                        &lt;div className=&quot;exit-popup-card logo-theme&quot;&gt;&#10;                                            &lt;span className=&quot;exit-popup-close&quot; onClick={() =&gt; setShowUnlockPopup(false)} title=&quot;Close&quot;&gt;&amp;#10005;&lt;/span&gt;&#10;                                            &lt;div className=&quot;exit-popup-title&quot;&gt;Unlock Vehicle&lt;/div&gt;&#10;                                            &lt;div className=&quot;unlock-popup-content&quot;&gt;&#10;                                                &lt;p&gt;To unlock this vehicle, a penalty fee of ₹{unlockFee} must be paid.&lt;/p&gt;&#10;                                                &lt;table className=&quot;exit-popup-details-table&quot;&gt;&#10;                                                    &lt;tbody&gt;&#10;                                                        &lt;tr&gt;&#10;                                                            &lt;td className=&quot;exit-popup-detail-label&quot;&gt;&lt;b&gt;Vehicle Number:&lt;/b&gt;&lt;/td&gt;&#10;                                                            &lt;td className=&quot;exit-popup-detail-value&quot;&gt;{selectedVehicle.vehicleNumber}&lt;/td&gt;&#10;                                                        &lt;/tr&gt;&#10;                                                        &lt;tr&gt;&#10;                                                            &lt;td className=&quot;exit-popup-detail-label&quot;&gt;&lt;b&gt;Penalty Fee:&lt;/b&gt;&lt;/td&gt;&#10;                                                            &lt;td className=&quot;exit-popup-detail-value&quot;&gt;₹{unlockFee}&lt;/td&gt;&#10;                                                        &lt;/tr&gt;&#10;                                                    &lt;/tbody&gt;&#10;                                                &lt;/table&gt;&#10;                                                &lt;div className=&quot;exit-popup-payment-method&quot;&gt;&#10;                                                    &lt;label htmlFor=&quot;unlock-payment-method&quot; className=&quot;exit-popup-detail-label&quot;&gt;Payment Method:&lt;/label&gt;&#10;                                                    &lt;select&#10;                                                        id=&quot;unlock-payment-method&quot;&#10;                                                        className=&quot;exit-popup-payment-dropdown&quot;&#10;                                                        value={unlockPaymentMethod}&#10;                                                        onChange={e =&gt; setUnlockPaymentMethod(e.target.value)}&#10;                                                    &gt;&#10;                                                        &lt;option value=&quot;CASH&quot;&gt;CASH&lt;/option&gt;&#10;                                                        &lt;option value=&quot;Card&quot;&gt;Card&lt;/option&gt;&#10;                                                        &lt;option value=&quot;UPI&quot;&gt;UPI&lt;/option&gt;&#10;                                                    &lt;/select&gt;&#10;                                                &lt;/div&gt;&#10;                                                {unlockPaymentMethod === 'UPI' &amp;&amp; (&#10;                                                    &lt;div className=&quot;exit-popup-qr-section&quot;&gt;&#10;                                                        &lt;div className=&quot;exit-popup-detail-label&quot; style={{marginBottom: '0.5rem'}}&gt;Scan to pay via UPI:&lt;/div&gt;&#10;                                                        &lt;QRCodeSVG&#10;                                                            value={`upi://pay?pa=test@upi&amp;pn=UnlockFee&amp;am=${unlockFee}`}&#10;                                                            size={128}&#10;                                                            bgColor=&quot;#fffbe6&quot;&#10;                                                            fgColor=&quot;#a57b0a&quot;&#10;                                                            className=&quot;exit-popup-qr-code&quot;&#10;                                                        /&gt;&#10;                                                    &lt;/div&gt;&#10;                                                )}&#10;                                            &lt;/div&gt;&#10;                                            &lt;button&#10;                                                className=&quot;confirm-exit-btn&quot;&#10;                                                onClick={handleUnlockConfirm}&#10;                                            &gt;&#10;                                                Confirm Payment &amp; Unlock&#10;                                            &lt;/button&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/&gt;&#10;                                )}&#10;&#10;                                {/* Subscription Popup */}&#10;                                {showSubscriptionPopup &amp;&amp; (&#10;                                    &lt;&gt;&#10;                                        &lt;div className=&quot;exit-popup-overlay&quot; onClick={() =&gt; setShowSubscriptionPopup(false)}&gt;&lt;/div&gt;&#10;                                        &lt;div className=&quot;exit-popup-card logo-theme&quot; style={{ maxWidth: '500px' }}&gt;&#10;                                            &lt;span className=&quot;exit-popup-close&quot; onClick={() =&gt; setShowSubscriptionPopup(false)} title=&quot;Close&quot;&gt;&amp;#10005;&lt;/span&gt;&#10;                                            &lt;div className=&quot;exit-popup-title&quot;&gt;Activate Subscription&lt;/div&gt;&#10;                                            &lt;div className=&quot;subscription-form&quot;&gt;&#10;                                                &lt;div className=&quot;form-field&quot;&gt;&#10;                                                    &lt;label htmlFor=&quot;subscription-vehicle-number&quot; className=&quot;form-label&quot;&gt;Vehicle Number:&lt;/label&gt;&#10;                                                    &lt;input&#10;                                                        type=&quot;text&quot;&#10;                                                        id=&quot;subscription-vehicle-number&quot;&#10;                                                        name=&quot;vehicleNumber&quot;&#10;                                                        className=&quot;form-input&quot;&#10;                                                        value={subscriptionData.vehicleNumber}&#10;                                                        onChange={(e) =&gt; {&#10;                                                            const value = e.target.value.toUpperCase();&#10;                                                            handleSubscriptionFormChange({&#10;                                                                target: {&#10;                                                                    name: 'vehicleNumber',&#10;                                                                    value: value&#10;                                                                }&#10;                                                            });&#10;                                                        }}&#10;                                                    /&gt;&#10;                                                    {subscriptionErrors.vehicleNumber &amp;&amp; (&#10;                                                        &lt;div className=&quot;form-error&quot;&gt;{subscriptionErrors.vehicleNumber}&lt;/div&gt;&#10;                                                    )}&#10;                                                &lt;/div&gt;&#10;&#10;                                                {/* Horizontal layout for Vehicle Type and Subscription Frequency */}&#10;                                                &lt;div style={{ display: 'flex', gap: '15px' }}&gt;&#10;                                                    &lt;div className=&quot;form-field&quot; style={{ flex: 1 }}&gt;&#10;                                                        &lt;label htmlFor=&quot;subscription-vehicle-type&quot; className=&quot;form-label&quot;&gt;Vehicle Type:&lt;/label&gt;&#10;                                                        &lt;select&#10;                                                            id=&quot;subscription-vehicle-type&quot;&#10;                                                            name=&quot;vehicleType&quot;&#10;                                                            className=&quot;form-select&quot;&#10;                                                            value={subscriptionData.vehicleType}&#10;                                                            onChange={handleSubscriptionFormChange}&#10;                                                            style={{ width: '100%' }}&#10;                                                        &gt;&#10;                                                            &lt;option value=&quot;Car&quot;&gt;Car&lt;/option&gt;&#10;                                                            &lt;option value=&quot;Bike&quot;&gt;Bike&lt;/option&gt;&#10;                                                            &lt;option value=&quot;Truck&quot;&gt;Truck&lt;/option&gt;&#10;                                                            &lt;option value=&quot;SUV&quot;&gt;SUV&lt;/option&gt;&#10;                                                        &lt;/select&gt;&#10;                                                        {subscriptionErrors.vehicleType &amp;&amp; (&#10;                                                            &lt;div className=&quot;form-error&quot;&gt;{subscriptionErrors.vehicleType}&lt;/div&gt;&#10;                                                        )}&#10;                                                    &lt;/div&gt;&#10;&#10;                                                    &lt;div className=&quot;form-field&quot; style={{ flex: 1 }}&gt;&#10;                                                        &lt;label htmlFor=&quot;subscription-frequency&quot; className=&quot;form-label&quot;&gt;Subscription Frequency:&lt;/label&gt;&#10;                                                        &lt;select&#10;                                                            id=&quot;subscription-frequency&quot;&#10;                                                            name=&quot;subscriptionFrequency&quot;&#10;                                                            className=&quot;form-select&quot;&#10;                                                            value={subscriptionData.subscriptionFrequency}&#10;                                                            onChange={handleSubscriptionFormChange}&#10;                                                            style={{ width: '100%' }}&#10;                                                        &gt;&#10;                                                            &lt;option value=&quot;Monthly&quot;&gt;Monthly&lt;/option&gt;&#10;                                                            &lt;option value=&quot;Quarterly&quot;&gt;Quarterly&lt;/option&gt;&#10;                                                            &lt;option value=&quot;Half-yearly&quot;&gt;Half-yearly&lt;/option&gt;&#10;                                                            &lt;option value=&quot;Yearly&quot;&gt;Yearly&lt;/option&gt;&#10;                                                        &lt;/select&gt;&#10;                                                        {subscriptionErrors.subscriptionFrequency &amp;&amp; (&#10;                                                            &lt;div className=&quot;form-error&quot;&gt;{subscriptionErrors.subscriptionFrequency}&lt;/div&gt;&#10;                                                        )}&#10;                                                    &lt;/div&gt;&#10;                                                &lt;/div&gt;&#10;&#10;                                                &lt;div className=&quot;form-field&quot;&gt;&#10;                                                    &lt;label htmlFor=&quot;subscription-type&quot; className=&quot;form-label&quot;&gt;Subscription Type:&lt;/label&gt;&#10;                                                    &lt;select&#10;                                                        id=&quot;subscription-type&quot;&#10;                                                        name=&quot;subscriptionType&quot;&#10;                                                        className=&quot;form-select&quot;&#10;                                                        value={subscriptionData.subscriptionType}&#10;                                                        onChange={handleSubscriptionFormChange}&#10;                                                    &gt;&#10;                                                        &lt;option value=&quot;PREMIUM&quot;&gt;PREMIUM&lt;/option&gt;&#10;                                                        &lt;option value=&quot;ELITE&quot;&gt;ELITE&lt;/option&gt;&#10;                                                        &lt;option value=&quot;SUPER&quot;&gt;SUPER&lt;/option&gt;&#10;                                                    &lt;/select&gt;&#10;                                                    {subscriptionErrors.subscriptionType &amp;&amp; (&#10;                                                        &lt;div className=&quot;form-error&quot;&gt;{subscriptionErrors.subscriptionType}&lt;/div&gt;&#10;                                                    )}&#10;                                                &lt;/div&gt;&#10;&#10;                                                &lt;div className=&quot;form-field&quot;&gt;&#10;                                                    &lt;label className=&quot;form-label&quot;&gt;&lt;b&gt;Parking Lot:&lt;/b&gt;&lt;/label&gt;&#10;                                                    &lt;span className=&quot;form-value&quot;&gt;{parkingLotName}&lt;/span&gt;&#10;                                                &lt;/div&gt;&#10;&#10;                                                {/* Subscription Charge Field */}&#10;                                                &lt;div className=&quot;form-field&quot; style={{ backgroundColor: '#f8f8f8', padding: '10px', borderRadius: '4px', marginTop: '10px' }}&gt;&#10;                                                    &lt;label className=&quot;form-label&quot;&gt;&lt;b&gt;Subscription Charge:&lt;/b&gt;&lt;/label&gt;&#10;                                                    &lt;div style={{ display: 'flex', justifyContent: 'space-between', marginTop: '5px' }}&gt;&#10;                                                        &lt;div&gt;&#10;                                                            &lt;span className=&quot;form-value&quot; style={{ fontSize: '1.1em' }}&gt;&#10;                                                                ₹{calculateSubscriptionCharge(&#10;                                                                    subscriptionData.subscriptionType,&#10;                                                                    subscriptionData.subscriptionFrequency,&#10;                                                                    subscriptionData.vehicleType&#10;                                                                ).monthly}&#10;                                                            &lt;/span&gt;&#10;                                                            &lt;span style={{ fontSize: '0.9em', color: '#666' }}&gt; / month&lt;/span&gt;&#10;                                                        &lt;/div&gt;&#10;                                                        &lt;div&gt;&#10;                                                            &lt;span className=&quot;form-label&quot; style={{ fontWeight: 'bold', color: '#a57b0a' }}&gt;Total: &lt;/span&gt;&#10;                                                            &lt;span className=&quot;form-value&quot; style={{ fontWeight: 'bold', fontSize: '1.1em', color: '#a57b0a' }}&gt;&#10;                                                                ₹{calculateSubscriptionCharge(&#10;                                                                    subscriptionData.subscriptionType,&#10;                                                                    subscriptionData.subscriptionFrequency,&#10;                                                                    subscriptionData.vehicleType&#10;                                                                ).total}&#10;                                                            &lt;/span&gt;&#10;                                                        &lt;/div&gt;&#10;                                                    &lt;/div&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;&#10;                                            {/* Benefits Section */}&#10;                                            &lt;div className=&quot;subscription-benefits&quot; style={{ marginTop: '15px', marginBottom: '15px', border: '1px solid #ddd', padding: '10px', borderRadius: '4px' }}&gt;&#10;                                                &lt;h4 style={{ marginTop: '0', marginBottom: '10px' }}&gt;Benefits:&lt;/h4&gt;&#10;                                                &lt;ul style={{ paddingLeft: '20px', margin: '0' }}&gt;&#10;                                                    {getSubscriptionBenefits(subscriptionData.subscriptionType).map((benefit, index) =&gt; (&#10;                                                        &lt;li key={index} style={{ marginBottom: '5px' }}&gt;{benefit}&lt;/li&gt;&#10;                                                    ))}&#10;                                                &lt;/ul&gt;&#10;                                            &lt;/div&gt;&#10;&#10;                                            &lt;button&#10;                                                className=&quot;confirm-exit-btn&quot;&#10;                                                onClick={handleSubscriptionSubmit}&#10;                                            &gt;&#10;                                                Subscribe&#10;                                            &lt;/button&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/&gt;&#10;                                )}&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;} /&gt;&#10;&#9;&#9;&#9;&#9;&#9;&lt;/Routes&gt;&#10;&#9;&#9;&#9;&#9;&lt;/div&gt;&#10;&#9;&#9;&#9;} /&gt;&#10;&#9;&#9;&lt;/Routes&gt;&#10;&#9;);&#10;};&#10;&#10;export default EmployeeDashboard;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/dashboard/subscription/Subscription.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/dashboard/subscription/Subscription.js" />
              <option name="originalContent" value="import React, { useState, useEffect } from 'react';&#10;import '../parking-history/ParkingHistory.css'; // Reuse the same CSS&#10;&#10;const MOCK_SUBSCRIPTIONS = [&#10;  {&#10;    subscriptionId: 'SUB001',&#10;    vehicleNumber: 'MH12AB1234',&#10;    subscriptionType: 'PREMIUM',&#10;    vehicleType: 'Car',&#10;    employeeName: 'Rahul Sharma',&#10;    employeeId: 'EMP001',&#10;    startDate: '2025-08-01',&#10;    endDate: '2025-11-01',&#10;    plan: 'Quarterly',&#10;    amount: 24000,&#10;    status: 'Active',&#10;    autoRenew: true,&#10;    parkingLotId: 'A1',&#10;    spotNumber: '23'&#10;  },&#10;  {&#10;    subscriptionId: 'SUB002',&#10;    vehicleNumber: 'MH14XY5678',&#10;    vehicleType: 'Bike',&#10;    subscriptionType: 'ELITE',&#10;    employeeName: 'Priya Patel',&#10;    employeeId: 'EMP002',&#10;    startDate: '2025-09-01',&#10;    endDate: '2025-10-01',&#10;    plan: 'Monthly',&#10;    amount: 3000,&#10;    status: 'Active',&#10;    autoRenew: true,&#10;    parkingLotId: 'B1',&#10;    spotNumber: '45'&#10;  },&#10;  {&#10;    subscriptionId: 'SUB003',&#10;    vehicleNumber: 'MH01CD4567',&#10;    vehicleType: 'SUV',&#10;    employeeName: 'Amit Kumar',&#10;    employeeId: 'EMP003',&#10;    startDate: '2025-07-01',&#10;    endDate: '2026-01-01',&#10;    plan: 'Half-yearly',&#10;    amount: 72000,&#10;    status: 'Active',&#10;    autoRenew: false,&#10;    parkingLotId: 'C1',&#10;    spotNumber: '12'&#10;  },&#10;  {&#10;    subscriptionId: 'SUB004',&#10;    vehicleNumber: 'MH02EF8901',&#10;    vehicleType: 'Car',&#10;    employeeName: 'Sneha Gupta',&#10;    employeeId: 'EMP004',&#10;    startDate: '2025-09-01',&#10;    endDate: '2025-12-01',&#10;    plan: 'Quarterly',&#10;    amount: 24000,&#10;    status: 'Active',&#10;    autoRenew: true,&#10;    parkingLotId: 'A1',&#10;    spotNumber: '34'&#10;  },&#10;  {&#10;    subscriptionId: 'SUB005',&#10;    vehicleNumber: 'MH03GH2345',&#10;    vehicleType: 'Bike',&#10;    employeeName: 'Arun Singh',&#10;    employeeId: 'EMP005',&#10;    startDate: '2025-08-15',&#10;    endDate: '2025-09-15',&#10;    plan: 'Monthly',&#10;    amount: 3000,&#10;    status: 'Expired',&#10;    autoRenew: false,&#10;    parkingLotId: 'B1',&#10;    spotNumber: '56'&#10;  },&#10;  {&#10;    subscriptionId: 'SUB006',&#10;    vehicleNumber: 'MH04IJ6789',&#10;    vehicleType: 'Electric Car',&#10;    employeeName: 'Neha Verma',&#10;    employeeId: 'EMP006',&#10;    startDate: '2025-06-01',&#10;    endDate: '2026-06-01',&#10;    plan: 'Annual',&#10;    amount: 90000,&#10;    status: 'Active',&#10;    autoRenew: true,&#10;    parkingLotId: 'D1',&#10;    spotNumber: '15'&#10;  },&#10;  {&#10;    subscriptionId: 'SUB007',&#10;    vehicleNumber: 'MH05KL0123',&#10;    vehicleType: 'Commercial',&#10;    employeeName: 'Vikram Malhotra',&#10;    employeeId: 'EMP007',&#10;    startDate: '2025-09-01',&#10;    endDate: '2026-03-01',&#10;    plan: 'Half-yearly',&#10;    amount: 90000,&#10;    status: 'Active',&#10;    autoRenew: false,&#10;    parkingLotId: 'E1',&#10;    spotNumber: '08'&#10;  },&#10;  {&#10;    subscriptionId: 'SUB008',&#10;    vehicleNumber: 'MH06MN4567',&#10;    vehicleType: 'Luxury Car',&#10;    employeeName: 'Rajesh Kapoor',&#10;    employeeId: 'EMP008',&#10;    startDate: '2025-09-01',&#10;    endDate: '2025-12-01',&#10;    plan: 'Quarterly',&#10;    amount: 54000,&#10;    status: 'Active',&#10;    autoRenew: true,&#10;    parkingLotId: 'F1',&#10;    spotNumber: '05'&#10;  },&#10;  {&#10;    subscriptionId: 'SUB009',&#10;    vehicleNumber: 'MH07OP8901',&#10;    vehicleType: 'Scooter',&#10;    employeeName: 'Meera Joshi',&#10;    employeeId: 'EMP009',&#10;    startDate: '2025-08-01',&#10;    endDate: '2025-09-01',&#10;    plan: 'Monthly',&#10;    amount: 2500,&#10;    status: 'Expired',&#10;    autoRenew: false,&#10;    parkingLotId: 'G1',&#10;    spotNumber: '67'&#10;  },&#10;  {&#10;    subscriptionId: 'SUB010',&#10;    vehicleNumber: 'MH08QR2345',&#10;    vehicleType: 'Handicapped',&#10;    employeeName: 'Sunil Mehta',&#10;    employeeId: 'EMP010',&#10;    startDate: '2025-07-01',&#10;    endDate: '2026-07-01',&#10;    plan: 'Annual',&#10;    amount: 60000,&#10;    status: 'Active',&#10;    autoRenew: true,&#10;    parkingLotId: 'H1',&#10;    spotNumber: '02'&#10;  },&#10;  {&#10;    subscriptionId: 'SUB011',&#10;    vehicleNumber: 'MH09ST6789',&#10;    vehicleType: 'Electric Bike',&#10;    employeeName: 'Aarti Chawla',&#10;    employeeId: 'EMP011',&#10;    startDate: '2025-09-01',&#10;    endDate: '2025-10-01',&#10;    plan: 'Monthly',&#10;    amount: 2700,&#10;    status: 'Active',&#10;    autoRenew: true,&#10;    parkingLotId: 'B1',&#10;    spotNumber: '78'&#10;  },&#10;  {&#10;    subscriptionId: 'SUB012',&#10;    vehicleNumber: 'MH10UV0123',&#10;    vehicleType: 'Reserved Spot',&#10;    employeeName: 'Dinesh Tiwari',&#10;    employeeId: 'EMP012',&#10;    startDate: '2025-09-01',&#10;    endDate: '2025-12-01',&#10;    plan: 'Quarterly',&#10;    amount: 45000,&#10;    status: 'Pending',&#10;    autoRenew: false,&#10;    parkingLotId: 'A1',&#10;    spotNumber: '01'&#10;  }&#10;];&#10;&#10;const Subscription = ({ sidebarCollapsed }) =&gt; {&#10;  const [search, setSearch] = useState('');&#10;    alert(&quot;Subscription activated successfully!&quot;);&#10;  };&#10;&#10;  // Filter subscriptions based on search (vehicle number, employee name, or subscription ID)&#10;  const filteredSubscriptions = MOCK_SUBSCRIPTIONS.filter(sub =&gt;&#10;    sub.vehicleNumber.toLowerCase().includes(search.toLowerCase()) ||&#10;    sub.employeeName.toLowerCase().includes(search.toLowerCase()) ||&#10;    sub.subscriptionId.toLowerCase().includes(search.toLowerCase())&#10;  );&#10;&#10;  // Reset to first page when search changes&#10;  useEffect(() =&gt; {&#10;    setCurrentPage(1);&#10;  }, [search]);&#10;&#10;  // Get current rows for pagination&#10;  const indexOfLastRow = currentPage * rowsPerPage;&#10;  const indexOfFirstRow = indexOfLastRow - rowsPerPage;&#10;  const currentRows = filteredSubscriptions.slice(indexOfFirstRow, indexOfLastRow);&#10;&#10;  // Ensure we always have exactly 10 rows (or fill with empty rows)&#10;  const rowsToDisplay = [...currentRows];&#10;  while (rowsToDisplay.length &lt; rowsPerPage) {&#10;    rowsToDisplay.push(null); // Add empty rows to maintain exactly 10 items&#10;  }&#10;&#10;  // Calculate total pages&#10;  const totalPages = Math.max(1, Math.ceil(filteredSubscriptions.length / rowsPerPage));&#10;&#10;  // If current page is beyond total pages (e.g., after search filter), reset to page 1&#10;  useEffect(() =&gt; {&#10;    if (currentPage &gt; totalPages &amp;&amp; totalPages &gt; 0) {&#10;      setCurrentPage(1);&#10;    }&#10;  }, [currentPage, totalPages]);&#10;&#10;  // Change page&#10;  const nextPage = () =&gt; setCurrentPage(prev =&gt; Math.min(prev + 1, totalPages));&#10;  const prevPage = () =&gt; setCurrentPage(prev =&gt; Math.max(prev - 1, 1));&#10;&#10;  // Get status class for styling&#10;  const getStatusClass = (status) =&gt; {&#10;    switch(status.toLowerCase()) {&#10;      case 'active': return 'status-active';&#10;      case 'expired': return 'status-expired';&#10;      case 'pending': return 'status-pending';&#10;      default: return '';&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;div className={`parking-history-container ${sidebarCollapsed ? 'collapsed' : 'expanded'}`}&gt;&#10;      &lt;h2 className=&quot;parking-history-title&quot;&gt;Subscription&lt;/h2&gt;&#10;      &lt;div className=&quot;parking-history-search-bar&quot;&gt;&#10;        &lt;div className=&quot;search-input-wrapper&quot;&gt;&#10;          &lt;span className=&quot;search-icon&quot;&gt;&lt;/span&gt;&#10;          &lt;input&#10;            type=&quot;text&quot;&#10;            placeholder=&quot;Search by Vehicle Number&quot;&#10;            value={search}&#10;            onChange={e =&gt; setSearch(e.target.value)}&#10;            className=&quot;parking-history-search-input&quot;&#10;          /&gt;&#10;          &lt;button className=&quot;activate-button&quot; onClick={() =&gt; alert('Activate Subscription functionality not implemented.')}&gt;&#10;        &lt;div className=&quot;button-container&quot;&gt;&#10;          &lt;button className=&quot;activate-button&quot; onClick={handleSubscriptionClick}&gt;&#10;            Activate Subscription&#10;          &lt;/button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;      &lt;div className=&quot;table-wrapper&quot;&gt;&#10;        &lt;table className=&quot;parking-history-table&quot;&gt;&#10;          &lt;thead&gt;&#10;            &lt;tr&gt;&#10;              &lt;th&gt;ID&lt;/th&gt;&#10;              &lt;th&gt;Vehicle Number&lt;/th&gt;&#10;              &lt;th&gt;Subscription Type&lt;/th&gt;&#10;              &lt;th&gt;Plan&lt;/th&gt;&#10;              &lt;th&gt;Start Date&lt;/th&gt;&#10;              &lt;th&gt;End Date&lt;/th&gt;&#10;              &lt;th&gt;Amount (₹)&lt;/th&gt;&#10;              &lt;th&gt;Status&lt;/th&gt;&#10;            &lt;/tr&gt;&#10;          &lt;/thead&gt;&#10;          &lt;tbody&gt;&#10;            {rowsToDisplay.map((subscription, index) =&gt; (&#10;              subscription ? (&#10;                &lt;tr key={`${subscription.subscriptionId}-${index}`}&gt;&#10;                  &lt;td&gt;{subscription.subscriptionId}&lt;/td&gt;&#10;                  &lt;td&gt;{subscription.vehicleNumber}&lt;/td&gt;&#10;                  &lt;td&gt;{subscription.subscriptionType}&lt;/td&gt;&#10;                  &lt;td&gt;{subscription.plan}&lt;/td&gt;&#10;                  &lt;td&gt;{subscription.startDate}&lt;/td&gt;&#10;                  &lt;td&gt;{subscription.endDate}&lt;/td&gt;&#10;                  &lt;td&gt;{subscription.amount}&lt;/td&gt;&#10;                  &lt;td className={getStatusClass(subscription.status)}&gt;{subscription.status}&lt;/td&gt;&#10;                &lt;/tr&gt;&#10;              ) : (&#10;                &lt;tr key={`empty-${index}`}&gt;&#10;                  &lt;td colSpan=&quot;9&quot;&gt;&amp;nbsp;&lt;/td&gt;&#10;                &lt;/tr&gt;&#10;              )&#10;            ))}&#10;          &lt;/tbody&gt;&#10;        &lt;/table&gt;&#10;      &lt;/div&gt;&#10;      &lt;div className=&quot;pagination-controls&quot;&gt;&#10;        &lt;button onClick={prevPage} disabled={currentPage === 1}&gt;&#10;          Prev&#10;        &lt;/button&gt;&#10;        &lt;span className=&quot;pagination-info&quot;&gt;&#10;          Page {currentPage} of {totalPages}&#10;        &lt;/span&gt;&#10;        &lt;button onClick={nextPage} disabled={currentPage === totalPages || filteredSubscriptions.length === 0}&gt;&#10;          Next&#10;        &lt;/button&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default Subscription;&#10;" />
              <option name="updatedContent" value="import React, { useState, useEffect } from 'react';&#10;import './Subscription.css';&#10;import '../parking-history/ParkingHistory.css'; // Reuse the same CSS&#10;import { QRCodeSVG } from 'qrcode.react'; // Import QR code component&#10;&#10;// Mock subscription data&#10;const MOCK_SUBSCRIPTIONS = [&#10;  {&#10;    subscriptionId: 'SUB001',&#10;    vehicleNumber: 'MH12AB1234',&#10;    subscriptionType: 'PREMIUM',&#10;    vehicleType: 'Car',&#10;    employeeName: 'Rahul Sharma',&#10;    employeeId: 'EMP001',&#10;    startDate: '2025-08-01',&#10;    endDate: '2025-11-01',&#10;    plan: 'Quarterly',&#10;    amount: 24000,&#10;    status: 'Active',&#10;    autoRenew: true,&#10;    parkingLotId: 'A1',&#10;    spotNumber: '23'&#10;  },&#10;  {&#10;    subscriptionId: 'SUB002',&#10;    vehicleNumber: 'MH14XY5678',&#10;    vehicleType: 'Bike',&#10;    subscriptionType: 'ELITE',&#10;    employeeName: 'Priya Patel',&#10;    employeeId: 'EMP002',&#10;    startDate: '2025-09-01',&#10;    endDate: '2025-10-01',&#10;    plan: 'Monthly',&#10;    amount: 3000,&#10;    status: 'Active',&#10;    autoRenew: true,&#10;    parkingLotId: 'B1',&#10;    spotNumber: '45'&#10;  },&#10;  {&#10;    subscriptionId: 'SUB003',&#10;    vehicleNumber: 'MH01CD4567',&#10;    vehicleType: 'SUV',&#10;    employeeName: 'Amit Kumar',&#10;    employeeId: 'EMP003',&#10;    startDate: '2025-07-01',&#10;    endDate: '2026-01-01',&#10;    plan: 'Half-yearly',&#10;    amount: 72000,&#10;    status: 'Active',&#10;    autoRenew: false,&#10;    parkingLotId: 'C1',&#10;    spotNumber: '12'&#10;  },&#10;  {&#10;    subscriptionId: 'SUB004',&#10;    vehicleNumber: 'MH02EF8901',&#10;    vehicleType: 'Car',&#10;    employeeName: 'Sneha Gupta',&#10;    employeeId: 'EMP004',&#10;    startDate: '2025-09-01',&#10;    endDate: '2025-12-01',&#10;    plan: 'Quarterly',&#10;    amount: 24000,&#10;    status: 'Active',&#10;    autoRenew: true,&#10;    parkingLotId: 'A1',&#10;    spotNumber: '34'&#10;  },&#10;  {&#10;    subscriptionId: 'SUB005',&#10;    vehicleNumber: 'MH03GH2345',&#10;    vehicleType: 'Bike',&#10;    employeeName: 'Arun Singh',&#10;    employeeId: 'EMP005',&#10;    startDate: '2025-08-15',&#10;    endDate: '2025-09-15',&#10;    plan: 'Monthly',&#10;    amount: 3000,&#10;    status: 'Expired',&#10;    autoRenew: false,&#10;    parkingLotId: 'B1',&#10;    spotNumber: '56'&#10;  },&#10;  {&#10;    subscriptionId: 'SUB006',&#10;    vehicleNumber: 'MH04IJ6789',&#10;    vehicleType: 'Electric Car',&#10;    employeeName: 'Neha Verma',&#10;    employeeId: 'EMP006',&#10;    startDate: '2025-06-01',&#10;    endDate: '2026-06-01',&#10;    plan: 'Annual',&#10;    amount: 90000,&#10;    status: 'Active',&#10;    autoRenew: true,&#10;    parkingLotId: 'D1',&#10;    spotNumber: '15'&#10;  },&#10;  {&#10;    subscriptionId: 'SUB007',&#10;    vehicleNumber: 'MH05KL0123',&#10;    vehicleType: 'Commercial',&#10;    employeeName: 'Vikram Malhotra',&#10;    employeeId: 'EMP007',&#10;    startDate: '2025-09-01',&#10;    endDate: '2026-03-01',&#10;    plan: 'Half-yearly',&#10;    amount: 90000,&#10;    status: 'Active',&#10;    autoRenew: false,&#10;    parkingLotId: 'E1',&#10;    spotNumber: '08'&#10;  },&#10;  {&#10;    subscriptionId: 'SUB008',&#10;    vehicleNumber: 'MH06MN4567',&#10;    vehicleType: 'Luxury Car',&#10;    employeeName: 'Rajesh Kapoor',&#10;    employeeId: 'EMP008',&#10;    startDate: '2025-09-01',&#10;    endDate: '2025-12-01',&#10;    plan: 'Quarterly',&#10;    amount: 54000,&#10;    status: 'Active',&#10;    autoRenew: true,&#10;    parkingLotId: 'F1',&#10;    spotNumber: '05'&#10;  },&#10;  {&#10;    subscriptionId: 'SUB009',&#10;    vehicleNumber: 'MH07OP8901',&#10;    vehicleType: 'Scooter',&#10;    employeeName: 'Meera Joshi',&#10;    employeeId: 'EMP009',&#10;    startDate: '2025-08-01',&#10;    endDate: '2025-09-01',&#10;    plan: 'Monthly',&#10;    amount: 2500,&#10;    status: 'Expired',&#10;    autoRenew: false,&#10;    parkingLotId: 'G1',&#10;    spotNumber: '67'&#10;  },&#10;  {&#10;    subscriptionId: 'SUB010',&#10;    vehicleNumber: 'MH08QR2345',&#10;    vehicleType: 'Handicapped',&#10;    employeeName: 'Sunil Mehta',&#10;    employeeId: 'EMP010',&#10;    startDate: '2025-07-01',&#10;    endDate: '2026-07-01',&#10;    plan: 'Annual',&#10;    amount: 60000,&#10;    status: 'Active',&#10;    autoRenew: true,&#10;    parkingLotId: 'H1',&#10;    spotNumber: '02'&#10;  },&#10;  {&#10;    subscriptionId: 'SUB011',&#10;    vehicleNumber: 'MH09ST6789',&#10;    vehicleType: 'Electric Bike',&#10;    employeeName: 'Aarti Chawla',&#10;    employeeId: 'EMP011',&#10;    startDate: '2025-09-01',&#10;    endDate: '2025-10-01',&#10;    plan: 'Monthly',&#10;    amount: 2700,&#10;    status: 'Active',&#10;    autoRenew: true,&#10;    parkingLotId: 'B1',&#10;    spotNumber: '78'&#10;  },&#10;  {&#10;    subscriptionId: 'SUB012',&#10;    vehicleNumber: 'MH10UV0123',&#10;    vehicleType: 'Reserved Spot',&#10;    employeeName: 'Dinesh Tiwari',&#10;    employeeId: 'EMP012',&#10;    startDate: '2025-09-01',&#10;    endDate: '2025-12-01',&#10;    plan: 'Quarterly',&#10;    amount: 45000,&#10;    status: 'Pending',&#10;    autoRenew: false,&#10;    parkingLotId: 'A1',&#10;    spotNumber: '01'&#10;  }&#10;];&#10;&#10;const Subscription = ({ sidebarCollapsed }) =&gt; {&#10;  const [search, setSearch] = useState('');&#10;  const [currentPage, setCurrentPage] = useState(1);&#10;  const [rowsPerPage] = useState(10); // Fixed at exactly 10 rows per page&#10;&#10;  // New state for subscription popup&#10;  const [showSubscriptionPopup, setShowSubscriptionPopup] = useState(false);&#10;  const [subscriptionData, setSubscriptionData] = useState({&#10;    vehicleNumber: '',&#10;    vehicleType: 'Car',&#10;    subscriptionType: 'PREMIUM',&#10;    subscriptionFrequency: 'Monthly'&#10;  });&#10;  const [subscriptionErrors, setSubscriptionErrors] = useState({});&#10;&#10;  // New state for payment popup&#10;  const [showPaymentPopup, setShowPaymentPopup] = useState(false);&#10;  const [paymentData, setPaymentData] = useState({&#10;    amount: 0,&#10;    method: 'UPI',&#10;    referenceId: ''&#10;  });&#10;  const [paymentErrors, setPaymentErrors] = useState({});&#10;&#10;  // New state for payment success popup&#10;  const [showSuccessPopup, setShowSuccessPopup] = useState(false);&#10;  const [newSubscriptionId, setNewSubscriptionId] = useState('');&#10;  const [paymentSuccess, setPaymentSuccess] = useState(false);&#10;&#10;  // Function to get subscription benefits based on type&#10;  const getSubscriptionBenefits = (type) =&gt; {&#10;    switch(type) {&#10;      case 'PREMIUM':&#10;        return [&#10;          &quot;Priority parking spots&quot;,&#10;          &quot;24/7 customer support&quot;,&#10;          &quot;20% discount on monthly rates&quot;,&#10;          &quot;Free car wash once a month&quot;&#10;        ];&#10;      case 'ELITE':&#10;        return [&#10;          &quot;Reserved premium parking spots&quot;,&#10;          &quot;24/7 priority customer support&quot;,&#10;          &quot;35% discount on monthly rates&quot;,&#10;          &quot;Weekly car wash service&quot;,&#10;          &quot;Valet parking service&quot;&#10;        ];&#10;      case 'SUPER':&#10;        return [&#10;          &quot;VIP reserved parking spots&quot;,&#10;          &quot;Dedicated customer relationship manager&quot;,&#10;          &quot;50% discount on monthly rates&quot;,&#10;          &quot;Bi-weekly car wash and detailing&quot;,&#10;          &quot;Valet parking service&quot;,&#10;          &quot;Vehicle maintenance reminders&quot;,&#10;          &quot;Complimentary roadside assistance&quot;&#10;        ];&#10;      default:&#10;        return [&quot;No benefits available&quot;];&#10;    }&#10;  };&#10;&#10;  // Function to calculate subscription charge based on type and frequency&#10;  const calculateSubscriptionCharge = (type, frequency, vehicleType) =&gt; {&#10;    // Base monthly rates&#10;    let baseRate = 0;&#10;&#10;    // Set base rate according to vehicle type&#10;    switch(vehicleType) {&#10;      case 'Bike':&#10;        baseRate = 500; // Base rate for bike&#10;        break;&#10;      case 'Car':&#10;        baseRate = 1000; // Base rate for car&#10;        break;&#10;      case 'SUV':&#10;        baseRate = 1500; // Base rate for SUV&#10;        break;&#10;      case 'Truck':&#10;        baseRate = 2000; // Base rate for truck&#10;        break;&#10;      default:&#10;        baseRate = 1000;&#10;    }&#10;&#10;    // Multiply by subscription type factor&#10;    let typeFactor = 1;&#10;    switch(type) {&#10;      case 'PREMIUM':&#10;        typeFactor = 1.2; // 20% premium&#10;        break;&#10;      case 'ELITE':&#10;        typeFactor = 1.5; // 50% premium&#10;        break;&#10;      case 'SUPER':&#10;        typeFactor = 2; // 100% premium&#10;        break;&#10;      default:&#10;        typeFactor = 1;&#10;    }&#10;&#10;    // Calculate based on frequency with discount for longer subscriptions&#10;    let frequencyFactor = 1;&#10;    let months = 1;&#10;&#10;    switch(frequency) {&#10;      case 'Monthly':&#10;        months = 1;&#10;        frequencyFactor = 1; // No discount for monthly&#10;        break;&#10;      case 'Quarterly':&#10;        months = 3;&#10;        frequencyFactor = 0.9; // 10% discount for quarterly&#10;        break;&#10;      case 'Half-yearly':&#10;        months = 6;&#10;        frequencyFactor = 0.85; // 15% discount for half-yearly&#10;        break;&#10;      case 'Yearly':&#10;        months = 12;&#10;        frequencyFactor = 0.8; // 20% discount for yearly&#10;        break;&#10;      default:&#10;        months = 1;&#10;        frequencyFactor = 1;&#10;    }&#10;&#10;    // Calculate total charge&#10;    const monthlyCharge = baseRate * typeFactor * frequencyFactor;&#10;    const totalCharge = monthlyCharge * months;&#10;&#10;    return {&#10;      monthly: Math.round(monthlyCharge),&#10;      total: Math.round(totalCharge)&#10;    };&#10;  };&#10;&#10;  // Handle Subscription button click&#10;  const handleSubscriptionClick = () =&gt; {&#10;    setSubscriptionData({&#10;      vehicleNumber: '',&#10;      vehicleType: 'Car',&#10;      subscriptionType: 'PREMIUM',&#10;      subscriptionFrequency: 'Monthly'&#10;    });&#10;    setShowSubscriptionPopup(true);&#10;  };&#10;&#10;  // Handle Subscription form field change&#10;  const handleSubscriptionFormChange = (e) =&gt; {&#10;    const { name, value } = e.target;&#10;    setSubscriptionData(prevData =&gt; ({&#10;      ...prevData,&#10;      [name]: value&#10;    }));&#10;  };&#10;&#10;  // Validate Subscription form&#10;  const validateSubscriptionForm = () =&gt; {&#10;    const errors = {};&#10;&#10;    // Check vehicle number&#10;    if (!subscriptionData.vehicleNumber.trim()) {&#10;      errors.vehicleNumber = &quot;Vehicle number is required&quot;;&#10;    }&#10;&#10;    // Check vehicle type&#10;    if (!subscriptionData.vehicleType) {&#10;      errors.vehicleType = &quot;Please select a vehicle type&quot;;&#10;    }&#10;&#10;    // Check subscription type&#10;    if (!subscriptionData.subscriptionType) {&#10;      errors.subscriptionType = &quot;Please select a subscription type&quot;;&#10;    }&#10;&#10;    // Check subscription frequency&#10;    if (!subscriptionData.subscriptionFrequency) {&#10;      errors.subscriptionFrequency = &quot;Please select a subscription frequency&quot;;&#10;    }&#10;&#10;    setSubscriptionErrors(errors);&#10;    return Object.keys(errors).length === 0;&#10;  };&#10;&#10;  // Handle Subscription form submission&#10;  const handleSubscriptionSubmit = () =&gt; {&#10;    // Validate form&#10;    const isValid = validateSubscriptionForm();&#10;&#10;    if (!isValid) {&#10;      return; // Don't proceed if validation fails&#10;    }&#10;&#10;    // Calculate the amount based on subscription data&#10;    const charge = calculateSubscriptionCharge(&#10;      subscriptionData.subscriptionType,&#10;      subscriptionData.subscriptionFrequency,&#10;      subscriptionData.vehicleType&#10;    );&#10;&#10;    // Set payment data&#10;    setPaymentData({&#10;      amount: charge.total,&#10;      method: 'UPI',&#10;      referenceId: ''&#10;    });&#10;&#10;    // Close subscription popup and open payment popup&#10;    setShowSubscriptionPopup(false);&#10;    setShowPaymentPopup(true);&#10;  };&#10;&#10;  // Handle Payment button click&#10;  const handlePaymentClick = () =&gt; {&#10;    // Calculate the amount based on subscription data&#10;    const charge = calculateSubscriptionCharge(&#10;      subscriptionData.subscriptionType,&#10;      subscriptionData.subscriptionFrequency,&#10;      subscriptionData.vehicleType&#10;    );&#10;&#10;    setPaymentData({&#10;      amount: charge.total,&#10;      method: 'UPI',&#10;      referenceId: ''&#10;    });&#10;    setShowPaymentPopup(true);&#10;  };&#10;&#10;  // Handle Payment form field change&#10;  const handlePaymentFormChange = (e) =&gt; {&#10;    const { name, value } = e.target;&#10;    setPaymentData(prevData =&gt; ({&#10;      ...prevData,&#10;      [name]: value&#10;    }));&#10;  };&#10;&#10;  // Validate Payment form&#10;  const validatePaymentForm = () =&gt; {&#10;    const errors = {};&#10;&#10;    // Check amount&#10;    if (paymentData.amount &lt;= 0) {&#10;      errors.amount = &quot;Amount must be greater than 0&quot;;&#10;    }&#10;&#10;    // Check reference ID&#10;    if (!paymentData.referenceId.trim()) {&#10;      errors.referenceId = &quot;Reference ID is required&quot;;&#10;    }&#10;&#10;    setPaymentErrors(errors);&#10;    return Object.keys(errors).length === 0;&#10;  };&#10;&#10;  // Handle Payment form submission&#10;  const handlePaymentSubmit = () =&gt; {&#10;    // Validate form&#10;    const isValid = validatePaymentForm();&#10;&#10;    if (!isValid) {&#10;      return; // Don't proceed if validation fails&#10;    }&#10;&#10;    // Here you would typically send the payment data to your backend&#10;    // For demo, just show success message and close popup&#10;    setPaymentSuccess(true);&#10;    setShowPaymentPopup(false);&#10;&#10;    // Show a success message&#10;    alert(&quot;Payment successful! Subscription activated.&quot;);&#10;&#10;    // Create a new subscription entry to add to the table&#10;    const newSubscriptionId = `SUB${Math.floor(Math.random() * 1000).toString().padStart(3, '0')}`;&#10;    const today = new Date();&#10;&#10;    // Calculate end date based on subscription frequency&#10;    let endDate = new Date(today);&#10;    switch(subscriptionData.subscriptionFrequency) {&#10;      case 'Monthly':&#10;        endDate.setMonth(endDate.getMonth() + 1);&#10;        break;&#10;      case 'Quarterly':&#10;        endDate.setMonth(endDate.getMonth() + 3);&#10;        break;&#10;      case 'Half-yearly':&#10;        endDate.setMonth(endDate.getMonth() + 6);&#10;        break;&#10;      case 'Yearly':&#10;        endDate.setFullYear(endDate.getFullYear() + 1);&#10;        break;&#10;      default:&#10;        endDate.setMonth(endDate.getMonth() + 1);&#10;    }&#10;&#10;    const formatDate = (date) =&gt; {&#10;      return date.toISOString().split('T')[0];&#10;    };&#10;&#10;    // Create new subscription&#10;    const newSubscription = {&#10;      subscriptionId: newSubscriptionId,&#10;      vehicleNumber: subscriptionData.vehicleNumber,&#10;      vehicleType: subscriptionData.vehicleType,&#10;      subscriptionType: subscriptionData.subscriptionType,&#10;      employeeName: &quot;Current User&quot;,&#10;      employeeId: &quot;EMP-CURRENT&quot;,&#10;      startDate: formatDate(today),&#10;      endDate: formatDate(endDate),&#10;      plan: subscriptionData.subscriptionFrequency,&#10;      amount: calculateSubscriptionCharge(&#10;        subscriptionData.subscriptionType,&#10;        subscriptionData.subscriptionFrequency,&#10;        subscriptionData.vehicleType&#10;      ).total,&#10;      status: 'Active',&#10;      autoRenew: true,&#10;      parkingLotId: 'A1',&#10;      spotNumber: '01'&#10;    };&#10;&#10;    // Add to mock data&#10;    MOCK_SUBSCRIPTIONS.unshift(newSubscription);&#10;&#10;    // Set new subscription ID for success popup&#10;    setNewSubscriptionId(newSubscriptionId);&#10;&#10;    // Show success popup&#10;    setShowSuccessPopup(true);&#10;  };&#10;&#10;  // Filter subscriptions based on search (vehicle number, employee name, or subscription ID)&#10;  const filteredSubscriptions = MOCK_SUBSCRIPTIONS.filter(sub =&gt;&#10;    sub.vehicleNumber.toLowerCase().includes(search.toLowerCase()) ||&#10;    sub.employeeName.toLowerCase().includes(search.toLowerCase()) ||&#10;    sub.subscriptionId.toLowerCase().includes(search.toLowerCase())&#10;  );&#10;&#10;  // Reset to first page when search changes&#10;  useEffect(() =&gt; {&#10;    setCurrentPage(1);&#10;  }, [search]);&#10;&#10;  // Get current rows for pagination&#10;  const indexOfLastRow = currentPage * rowsPerPage;&#10;  const indexOfFirstRow = indexOfLastRow - rowsPerPage;&#10;  const currentRows = filteredSubscriptions.slice(indexOfFirstRow, indexOfLastRow);&#10;&#10;  // Ensure we always have exactly 10 rows (or fill with empty rows)&#10;  const rowsToDisplay = [...currentRows];&#10;  while (rowsToDisplay.length &lt; rowsPerPage) {&#10;    rowsToDisplay.push(null); // Add empty rows to maintain exactly 10 items&#10;  }&#10;&#10;  // Calculate total pages&#10;  const totalPages = Math.max(1, Math.ceil(filteredSubscriptions.length / rowsPerPage));&#10;&#10;  // If current page is beyond total pages (e.g., after search filter), reset to page 1&#10;  useEffect(() =&gt; {&#10;    if (currentPage &gt; totalPages &amp;&amp; totalPages &gt; 0) {&#10;      setCurrentPage(1);&#10;    }&#10;  }, [currentPage, totalPages]);&#10;&#10;  // Change page&#10;  const nextPage = () =&gt; setCurrentPage(prev =&gt; Math.min(prev + 1, totalPages));&#10;  const prevPage = () =&gt; setCurrentPage(prev =&gt; Math.max(prev - 1, 1));&#10;&#10;  // Get status class for styling&#10;  const getStatusClass = (status) =&gt; {&#10;    switch(status.toLowerCase()) {&#10;      case 'active': return 'status-active';&#10;      case 'expired': return 'status-expired';&#10;      case 'pending': return 'status-pending';&#10;      default: return '';&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;div className={`parking-history-container ${sidebarCollapsed ? 'collapsed' : 'expanded'}`}&gt;&#10;      &lt;h2 className=&quot;parking-history-title&quot;&gt;Subscription&lt;/h2&gt;&#10;      &lt;div className=&quot;parking-history-search-bar&quot;&gt;&#10;        &lt;div className=&quot;search-input-wrapper&quot;&gt;&#10;          &lt;span className=&quot;search-icon&quot;&gt;&lt;/span&gt;&#10;          &lt;input&#10;            type=&quot;text&quot;&#10;            placeholder=&quot;Search by Vehicle Number&quot;&#10;            value={search}&#10;            onChange={e =&gt; setSearch(e.target.value)}&#10;            className=&quot;parking-history-search-input&quot;&#10;          /&gt;&#10;        &lt;/div&gt;&#10;        &lt;div className=&quot;button-container&quot;&gt;&#10;          &lt;button className=&quot;activate-button&quot; onClick={handleSubscriptionClick}&gt;&#10;            Activate Subscription&#10;          &lt;/button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;      &lt;div className=&quot;table-wrapper&quot;&gt;&#10;        &lt;table className=&quot;parking-history-table&quot;&gt;&#10;          &lt;thead&gt;&#10;            &lt;tr&gt;&#10;              &lt;th&gt;ID&lt;/th&gt;&#10;              &lt;th&gt;Vehicle Number&lt;/th&gt;&#10;              &lt;th&gt;Subscription Type&lt;/th&gt;&#10;              &lt;th&gt;Plan&lt;/th&gt;&#10;              &lt;th&gt;Start Date&lt;/th&gt;&#10;              &lt;th&gt;End Date&lt;/th&gt;&#10;              &lt;th&gt;Amount (₹)&lt;/th&gt;&#10;              &lt;th&gt;Status&lt;/th&gt;&#10;            &lt;/tr&gt;&#10;          &lt;/thead&gt;&#10;          &lt;tbody&gt;&#10;            {rowsToDisplay.map((subscription, index) =&gt; (&#10;              subscription ? (&#10;                &lt;tr key={`${subscription.subscriptionId}-${index}`}&gt;&#10;                  &lt;td&gt;{subscription.subscriptionId}&lt;/td&gt;&#10;                  &lt;td&gt;{subscription.vehicleNumber}&lt;/td&gt;&#10;                  &lt;td&gt;{subscription.subscriptionType}&lt;/td&gt;&#10;                  &lt;td&gt;{subscription.plan}&lt;/td&gt;&#10;                  &lt;td&gt;{subscription.startDate}&lt;/td&gt;&#10;                  &lt;td&gt;{subscription.endDate}&lt;/td&gt;&#10;                  &lt;td&gt;{subscription.amount}&lt;/td&gt;&#10;                  &lt;td className={getStatusClass(subscription.status)}&gt;{subscription.status}&lt;/td&gt;&#10;                &lt;/tr&gt;&#10;              ) : (&#10;                &lt;tr key={`empty-${index}`}&gt;&#10;                  &lt;td colSpan=&quot;9&quot;&gt;&amp;nbsp;&lt;/td&gt;&#10;                &lt;/tr&gt;&#10;              )&#10;            ))}&#10;          &lt;/tbody&gt;&#10;        &lt;/table&gt;&#10;      &lt;/div&gt;&#10;      &lt;div className=&quot;pagination-controls&quot;&gt;&#10;        &lt;button onClick={prevPage} disabled={currentPage === 1}&gt;&#10;          Prev&#10;        &lt;/button&gt;&#10;        &lt;span className=&quot;pagination-info&quot;&gt;&#10;          Page {currentPage} of {totalPages}&#10;        &lt;/span&gt;&#10;        &lt;button onClick={nextPage} disabled={currentPage === totalPages || filteredSubscriptions.length === 0}&gt;&#10;          Next&#10;        &lt;/button&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Subscription Popup Form */}&#10;      {showSubscriptionPopup &amp;&amp; (&#10;        &lt;&gt;&#10;          &lt;div className=&quot;exit-popup-overlay&quot; onClick={() =&gt; setShowSubscriptionPopup(false)}&gt;&lt;/div&gt;&#10;          &lt;div className=&quot;exit-popup-card logo-theme&quot; style={{ maxWidth: '500px' }}&gt;&#10;            &lt;span className=&quot;exit-popup-close&quot; onClick={() =&gt; setShowSubscriptionPopup(false)} title=&quot;Close&quot;&gt;&amp;#10005;&lt;/span&gt;&#10;            &lt;div className=&quot;exit-popup-title&quot;&gt;Activate Subscription&lt;/div&gt;&#10;            &lt;div className=&quot;subscription-form&quot;&gt;&#10;              &lt;div className=&quot;form-field&quot;&gt;&#10;                &lt;label htmlFor=&quot;subscription-vehicle-number&quot; className=&quot;form-label&quot;&gt;Vehicle Number:&lt;/label&gt;&#10;                &lt;input&#10;                  type=&quot;text&quot;&#10;                  id=&quot;subscription-vehicle-number&quot;&#10;                  name=&quot;vehicleNumber&quot;&#10;                  className=&quot;form-input&quot;&#10;                  value={subscriptionData.vehicleNumber}&#10;                  onChange={(e) =&gt; {&#10;                    const value = e.target.value.toUpperCase();&#10;                    handleSubscriptionFormChange({&#10;                      target: {&#10;                        name: 'vehicleNumber',&#10;                        value: value&#10;                      }&#10;                    });&#10;                  }}&#10;                /&gt;&#10;                {subscriptionErrors.vehicleNumber &amp;&amp; (&#10;                  &lt;div className=&quot;form-error&quot;&gt;{subscriptionErrors.vehicleNumber}&lt;/div&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;&#10;              {/* Horizontal layout for Vehicle Type and Subscription Frequency */}&#10;              &lt;div style={{ display: 'flex', gap: '15px' }}&gt;&#10;                &lt;div className=&quot;form-field&quot; style={{ flex: 1 }}&gt;&#10;                  &lt;label htmlFor=&quot;subscription-vehicle-type&quot; className=&quot;form-label&quot;&gt;Vehicle Type:&lt;/label&gt;&#10;                  &lt;select&#10;                    id=&quot;subscription-vehicle-type&quot;&#10;                    name=&quot;vehicleType&quot;&#10;                    className=&quot;form-select&quot;&#10;                    value={subscriptionData.vehicleType}&#10;                    onChange={handleSubscriptionFormChange}&#10;                    style={{ width: '100%' }}&#10;                  &gt;&#10;                    &lt;option value=&quot;Car&quot;&gt;Car&lt;/option&gt;&#10;                    &lt;option value=&quot;Bike&quot;&gt;Bike&lt;/option&gt;&#10;                    &lt;option value=&quot;Truck&quot;&gt;Truck&lt;/option&gt;&#10;                    &lt;option value=&quot;SUV&quot;&gt;SUV&lt;/option&gt;&#10;                  &lt;/select&gt;&#10;                  {subscriptionErrors.vehicleType &amp;&amp; (&#10;                    &lt;div className=&quot;form-error&quot;&gt;{subscriptionErrors.vehicleType}&lt;/div&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;form-field&quot; style={{ flex: 1 }}&gt;&#10;                  &lt;label htmlFor=&quot;subscription-frequency&quot; className=&quot;form-label&quot;&gt;Subscription Frequency:&lt;/label&gt;&#10;                  &lt;select&#10;                    id=&quot;subscription-frequency&quot;&#10;                    name=&quot;subscriptionFrequency&quot;&#10;                    className=&quot;form-select&quot;&#10;                    value={subscriptionData.subscriptionFrequency}&#10;                    onChange={handleSubscriptionFormChange}&#10;                    style={{ width: '100%' }}&#10;                  &gt;&#10;                    &lt;option value=&quot;Monthly&quot;&gt;Monthly&lt;/option&gt;&#10;                    &lt;option value=&quot;Quarterly&quot;&gt;Quarterly&lt;/option&gt;&#10;                    &lt;option value=&quot;Half-yearly&quot;&gt;Half-yearly&lt;/option&gt;&#10;                    &lt;option value=&quot;Yearly&quot;&gt;Yearly&lt;/option&gt;&#10;                  &lt;/select&gt;&#10;                  {subscriptionErrors.subscriptionFrequency &amp;&amp; (&#10;                    &lt;div className=&quot;form-error&quot;&gt;{subscriptionErrors.subscriptionFrequency}&lt;/div&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;div className=&quot;form-field&quot;&gt;&#10;                &lt;label htmlFor=&quot;subscription-type&quot; className=&quot;form-label&quot;&gt;Subscription Type:&lt;/label&gt;&#10;                &lt;select&#10;                  id=&quot;subscription-type&quot;&#10;                  name=&quot;subscriptionType&quot;&#10;                  className=&quot;form-select&quot;&#10;                  value={subscriptionData.subscriptionType}&#10;                  onChange={handleSubscriptionFormChange}&#10;                &gt;&#10;                  &lt;option value=&quot;PREMIUM&quot;&gt;PREMIUM&lt;/option&gt;&#10;                  &lt;option value=&quot;ELITE&quot;&gt;ELITE&lt;/option&gt;&#10;                  &lt;option value=&quot;SUPER&quot;&gt;SUPER&lt;/option&gt;&#10;                &lt;/select&gt;&#10;                {subscriptionErrors.subscriptionType &amp;&amp; (&#10;                  &lt;div className=&quot;form-error&quot;&gt;{subscriptionErrors.subscriptionType}&lt;/div&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;&#10;              {/* Subscription Charge Field */}&#10;              &lt;div className=&quot;form-field&quot; style={{ backgroundColor: '#f8f8f8', padding: '10px', borderRadius: '4px', marginTop: '10px' }}&gt;&#10;                &lt;label className=&quot;form-label&quot;&gt;&lt;b&gt;Subscription Charge:&lt;/b&gt;&lt;/label&gt;&#10;                &lt;div style={{ display: 'flex', justifyContent: 'space-between', marginTop: '5px' }}&gt;&#10;                  &lt;div&gt;&#10;                    &lt;span className=&quot;form-value&quot; style={{ fontSize: '1.1em' }}&gt;&#10;                      ₹{calculateSubscriptionCharge(&#10;                        subscriptionData.subscriptionType,&#10;                        subscriptionData.subscriptionFrequency,&#10;                        subscriptionData.vehicleType&#10;                      ).monthly}&#10;                    &lt;/span&gt;&#10;                    &lt;span style={{ fontSize: '0.9em', color: '#666' }}&gt; / month&lt;/span&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div&gt;&#10;                    &lt;span className=&quot;form-label&quot; style={{ fontWeight: 'bold', color: '#a57b0a' }}&gt;Total: &lt;/span&gt;&#10;                    &lt;span className=&quot;form-value&quot; style={{ fontWeight: 'bold', fontSize: '1.1em', color: '#a57b0a' }}&gt;&#10;                      ₹{calculateSubscriptionCharge(&#10;                        subscriptionData.subscriptionType,&#10;                        subscriptionData.subscriptionFrequency,&#10;                        subscriptionData.vehicleType&#10;                      ).total}&#10;                    &lt;/span&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Benefits Section */}&#10;            &lt;div className=&quot;subscription-benefits&quot; style={{ marginTop: '15px', marginBottom: '15px', border: '1px solid #ddd', padding: '10px', borderRadius: '4px' }}&gt;&#10;              &lt;h4 style={{ marginTop: '0', marginBottom: '10px' }}&gt;Benefits:&lt;/h4&gt;&#10;              &lt;ul style={{ paddingLeft: '20px', margin: '0' }}&gt;&#10;                {getSubscriptionBenefits(subscriptionData.subscriptionType).map((benefit, index) =&gt; (&#10;                  &lt;li key={index} style={{ marginBottom: '5px' }}&gt;{benefit}&lt;/li&gt;&#10;                ))}&#10;              &lt;/ul&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;button&#10;              className=&quot;confirm-exit-btn&quot;&#10;              onClick={handleSubscriptionSubmit}&#10;            &gt;&#10;              Subscribe&#10;            &lt;/button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/&gt;&#10;      )}&#10;&#10;      {/* Payment Popup Form */}&#10;      {showPaymentPopup &amp;&amp; (&#10;        &lt;&gt;&#10;          &lt;div className=&quot;exit-popup-overlay&quot; onClick={() =&gt; setShowPaymentPopup(false)}&gt;&lt;/div&gt;&#10;          &lt;div className=&quot;exit-popup-card logo-theme&quot; style={{ maxWidth: '500px' }}&gt;&#10;            &lt;span className=&quot;exit-popup-close&quot; onClick={() =&gt; setShowPaymentPopup(false)} title=&quot;Close&quot;&gt;&amp;#10005;&lt;/span&gt;&#10;            &lt;div className=&quot;exit-popup-title&quot;&gt;Subscription Payment&lt;/div&gt;&#10;            &lt;table className=&quot;exit-popup-details-table&quot;&gt;&#10;              &lt;tbody&gt;&#10;                &lt;tr&gt;&#10;                  &lt;td className=&quot;exit-popup-detail-label&quot;&gt;&lt;b&gt;Vehicle Number:&lt;/b&gt;&lt;/td&gt;&#10;                  &lt;td className=&quot;exit-popup-detail-value&quot;&gt;{subscriptionData.vehicleNumber}&lt;/td&gt;&#10;                &lt;/tr&gt;&#10;                &lt;tr&gt;&#10;                  &lt;td className=&quot;exit-popup-detail-label&quot;&gt;&lt;b&gt;Subscription Type:&lt;/b&gt;&lt;/td&gt;&#10;                  &lt;td className=&quot;exit-popup-detail-value&quot;&gt;{subscriptionData.subscriptionType}&lt;/td&gt;&#10;                &lt;/tr&gt;&#10;                &lt;tr&gt;&#10;                  &lt;td className=&quot;exit-popup-detail-label&quot;&gt;&lt;b&gt;Plan:&lt;/b&gt;&lt;/td&gt;&#10;                  &lt;td className=&quot;exit-popup-detail-value&quot;&gt;{subscriptionData.subscriptionFrequency}&lt;/td&gt;&#10;                &lt;/tr&gt;&#10;                &lt;tr&gt;&#10;                  &lt;td className=&quot;exit-popup-detail-label&quot;&gt;&lt;b&gt;Amount:&lt;/b&gt;&lt;/td&gt;&#10;                  &lt;td className=&quot;exit-popup-detail-value&quot;&gt;₹{paymentData.amount}&lt;/td&gt;&#10;                &lt;/tr&gt;&#10;              &lt;/tbody&gt;&#10;            &lt;/table&gt;&#10;            &#10;            &lt;div className=&quot;exit-popup-payment-method&quot;&gt;&#10;              &lt;label htmlFor=&quot;payment-method&quot; className=&quot;exit-popup-detail-label&quot;&gt;Payment Method:&lt;/label&gt;&#10;              &lt;select&#10;                id=&quot;payment-method&quot;&#10;                className=&quot;exit-popup-payment-dropdown&quot;&#10;                value={paymentData.method}&#10;                onChange={e =&gt; handlePaymentFormChange({&#10;                  target: {&#10;                    name: 'method',&#10;                    value: e.target.value&#10;                  }&#10;                })}&#10;              &gt;&#10;                &lt;option value=&quot;UPI&quot;&gt;UPI&lt;/option&gt;&#10;                &lt;option value=&quot;Card&quot;&gt;Card&lt;/option&gt;&#10;                &lt;option value=&quot;CASH&quot;&gt;Cash&lt;/option&gt;&#10;                &lt;option value=&quot;Net Banking&quot;&gt;Net Banking&lt;/option&gt;&#10;              &lt;/select&gt;&#10;            &lt;/div&gt;&#10;            &#10;            {paymentData.method === 'UPI' &amp;&amp; (&#10;              &lt;div className=&quot;exit-popup-qr-section&quot;&gt;&#10;                &lt;div className=&quot;exit-popup-detail-label&quot; style={{marginBottom: '0.5rem'}}&gt;Scan to pay via UPI:&lt;/div&gt;&#10;                &lt;QRCodeSVG&#10;                  value={`upi://pay?pa=test@upi&amp;pn=ParkingSubscription&amp;am=${paymentData.amount}`}&#10;                  size={128}&#10;                  bgColor=&quot;#fffbe6&quot;&#10;                  fgColor=&quot;#a57b0a&quot;&#10;                  className=&quot;exit-popup-qr-code&quot;&#10;                /&gt;&#10;                &lt;div style={{ marginTop: '10px', fontSize: '0.9em', color: '#666' }}&gt;&#10;                  After payment, enter the UPI reference ID below&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;            &#10;            {paymentData.method === 'Card' &amp;&amp; (&#10;              &lt;div className=&quot;card-payment-section&quot; style={{ margin: '15px 0' }}&gt;&#10;                &lt;div className=&quot;form-field&quot;&gt;&#10;                  &lt;label className=&quot;form-label&quot;&gt;Card Number:&lt;/label&gt;&#10;                  &lt;input &#10;                    type=&quot;text&quot; &#10;                    className=&quot;form-input&quot; &#10;                    placeholder=&quot;XXXX XXXX XXXX XXXX&quot; &#10;                  /&gt;&#10;                &lt;/div&gt;&#10;                &lt;div style={{ display: 'flex', gap: '15px' }}&gt;&#10;                  &lt;div className=&quot;form-field&quot; style={{ flex: 1 }}&gt;&#10;                    &lt;label className=&quot;form-label&quot;&gt;Expiry Date:&lt;/label&gt;&#10;                    &lt;input &#10;                      type=&quot;text&quot; &#10;                      className=&quot;form-input&quot; &#10;                      placeholder=&quot;MM/YY&quot; &#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;form-field&quot; style={{ flex: 1 }}&gt;&#10;                    &lt;label className=&quot;form-label&quot;&gt;CVV:&lt;/label&gt;&#10;                    &lt;input &#10;                      type=&quot;password&quot; &#10;                      className=&quot;form-input&quot; &#10;                      placeholder=&quot;***&quot; &#10;                      maxLength=&quot;3&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;            &#10;            &lt;div className=&quot;form-field&quot;&gt;&#10;              &lt;label htmlFor=&quot;payment-reference-id&quot; className=&quot;form-label&quot;&gt;&#10;                {paymentData.method === 'UPI' ? 'UPI Reference ID:' : &#10;                 paymentData.method === 'Card' ? 'Transaction ID:' : 'Reference ID:'}&#10;              &lt;/label&gt;&#10;              &lt;input&#10;                type=&quot;text&quot;&#10;                id=&quot;payment-reference-id&quot;&#10;                name=&quot;referenceId&quot;&#10;                className=&quot;form-input&quot;&#10;                value={paymentData.referenceId}&#10;                onChange={handlePaymentFormChange}&#10;              /&gt;&#10;              {paymentErrors.referenceId &amp;&amp; (&#10;                &lt;div className=&quot;form-error&quot;&gt;{paymentErrors.referenceId}&lt;/div&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;&#10;            &lt;button&#10;              className=&quot;confirm-exit-btn&quot;&#10;              onClick={handlePaymentSubmit}&#10;              style={{ marginTop: '20px' }}&#10;            &gt;&#10;              Confirm Payment&#10;            &lt;/button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/&gt;&#10;      )}&#10;&#10;      {/* Success Popup - Shown only on successful subscription activation */}&#10;      {showSuccessPopup &amp;&amp; (&#10;        &lt;&gt;&#10;          &lt;div className=&quot;exit-popup-overlay&quot; onClick={() =&gt; setShowSuccessPopup(false)}&gt;&lt;/div&gt;&#10;          &lt;div className=&quot;exit-popup-card logo-theme&quot; style={{ maxWidth: '500px', padding: '20px', textAlign: 'center' }}&gt;&#10;            &lt;span className=&quot;exit-popup-close&quot; onClick={() =&gt; setShowSuccessPopup(false)} title=&quot;Close&quot;&gt;&amp;#10005;&lt;/span&gt;&#10;            &lt;div className=&quot;exit-popup-title&quot; style={{ marginBottom: '15px', fontSize: '1.5em', color: '#28a745' }}&gt;&#10;              Subscription Activated&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;exit-popup-content&quot; style={{ marginBottom: '15px', fontSize: '1.1em' }}&gt;&#10;              Your subscription has been successfully activated.&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;exit-popup-subscription-id&quot; style={{ marginBottom: '15px', fontSize: '1.2em', fontWeight: 'bold' }}&gt;&#10;              Subscription ID: {newSubscriptionId}&#10;            &lt;/div&gt;&#10;            &lt;button&#10;              className=&quot;confirm-exit-btn&quot;&#10;              onClick={() =&gt; setShowSuccessPopup(false)}&#10;              style={{ width: '100%' }}&#10;            &gt;&#10;              Close&#10;            &lt;/button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/&gt;&#10;      )}&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default Subscription;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>