<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/copilot.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/copilot.md" />
              <option name="originalContent" value="// Copilot Project Instructions&#10;//&#10;// 1. Use consistent routing: Each page/component should have its own route in App.js using React Router's &lt;Route&gt;.&#10;// 2. For loading indicators, use the animated logo-loading.svg as a spinner. Keep the animation clockwise and visually consistent.&#10;// 3. For error messages, use the .error-msg CSS class: red color, margin-top: 0, margin-bottom: 10px, font-size: 0.95em.&#10;// 4. For forms (login, forget password, etc.), use input-group and consistent button styles as in Login.css.&#10;// 5. For new pages, create a dedicated component in the appropriate folder (e.g., src/components/PageName/PageName.js).&#10;// 6. Import and use images/assets from the src/ directory, not public/.&#10;// 7. Use semantic HTML and accessible labels for all forms and buttons.&#10;// 8. Remove unused imports and code to keep files clean.&#10;// 9. Always validate and test new features for edge cases and UI consistency.&#10;// 10. Keep all new SVG or image assets in the src/ directory for easy import in React components.&#10;//&#10;// Update this file with any new project-wide conventions or requirements as they arise.&#10;" />
              <option name="updatedContent" value="// Copilot Project Instructions&#10;//&#10;// 1. Use consistent routing: Each page/component should have its own route in App.js using React Router's &lt;Route&gt;.&#10;// 2. For loading indicators, use the animated logo-loading.svg as a spinner. Keep the animation clockwise and visually consistent.&#10;// 3. For error messages, use the .error-msg CSS class: red color, margin-top: 0, margin-bottom: 10px, font-size: 0.95em.&#10;// 4. For forms (login, forget password, etc.), use input-group and consistent button styles as in Login.css.&#10;// 5. For new pages, create a dedicated component in the appropriate folder (e.g., src/components/PageName/PageName.js).&#10;// 6. Import and use images/assets from the src/ directory, not public/.&#10;// 7. Use semantic HTML and accessible labels for all forms and buttons.&#10;// 8. Remove unused imports and code to keep files clean.&#10;// 9. Always validate and test new features for edge cases and UI consistency.&#10;// 10. Keep all new SVG or image assets in the src/ directory for easy import in React components.&#10;//&#10;// Update this file with any new project-wide conventions or requirements as they arise.&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>